Diplomado Fundamentos de la Programación y Desarrollo Web Edición 1
    MÓDULO 1. FUNDAMENTOS DE LA PROGRAMACIÓN
        Tipos de datos
            Lo primero que vamos a trabajar durante este módulo de fundamentos son "Los tipos de datos". Vamos a trabajar básicamente con 4 tipos:

            Números
            Cadenas
            Booleanos
            Tipos especiales

            En el vídeo que tienes a continuación vamos a 
            profundizar sobre cada uno de ellos. Cómo te hemos comentado al inicio, 
            no te asustes que no resultan complejos. 
        Operaciones
            Una vez hemos visto los tipos de datos con los que vamos a trabajar, vamos a comenzar a realizar operaciones con ellos. Vamos a trabajar básicamente con 3 tipos de operaciones:

            Operaciones con números.
            Operaciones con cadenas
            Operaciones con booleanos

            En el vídeo que tienes a continuación vamos a trabajar las operaciones que podemos 
            realizar con cada uno de los tipos de datos que hemos definido anteriormente.
            Veamos como podemos operar con los diferentes datos.    
        Variables
            Una variable es un cajón con una etiqueta donde almacenamos datos de un programa. 
            Para definir una variable en JavaScript,
            usamos la palabra reservada"var" seguida del nombre que le queremos dar a la variable.

            En el siguiente video, veremos como declarar variables para utilizarlas
            en nuestros programas. ¡Adelante!    
        Comparaciones entre variables
            Una vez visto, qué son y cómo se declaran las variables en nuestros programas, ahora toca trabajar sobre la comparación entre ellas. Vamos a ver los operadores principales para llevar a cabo la comparación entre varibles:

            Igualdad y desigualdad
            Mayor y menor
            Falsy y truthy
            Dicen que las comparaciones son odiosas: ¡vamos a verlo!

            En el siguiente enlace te puedes descargar el material con todo 
            lo que has trabajado durante el módulo. 
        ESTRUCTURAS DE CONTROL
            Estructuras de selección
                Hasta ahora hemos visto instrucciones en un orden secuencial, 
                es decir, una detrás de otra. 
                Aunque se pueden ejecutar instrucciones bajo algunas condiciones, 
                para poder ejecutar mediante estas instrucciones, 
                utilizaremos las estructuras de selección. 
                En el siguiente vídeo te explicamos más sobre ellas. ¡Comenzamos!       
        PRUEBA 
            Test superado
            Has obtenido un 100 en esta tarea

            Tus respuestas
            1. Una variable es:
                Un tipo de dato utilizado en un programa
                Un mecanismo para creación de algoritmos
                Una instrucción de control
                X Una zona de memoria que almacena un dato
            2. El lenguaje que manipula registros del procesador es:
                Lenguaje máquina
                Lenguaje C
                Cualquier lenguaje de alto nivel
                Lenguaje ensamblador
            3. Indica cual de las siguientes es una diferencia entre un compilador y un intérprete:
                Un compilador genera código ejecutable puro, mientras que el intérprete genera código intermedio
                X Un compilador genera un archivo de código objeto, mientras que el intérprete no genera ningún archivo intermedio
                Un compilador genera código binario, mientras que el intérprete genera código en ensamblador
                Un compilador solo es aplicable a lenguajes de alto nivel, mientras que el intérprete se emplea con lenguajes de código intermedio.

            4. En un programa tenemos una variable llamada “intentos” que almacena el número de intentos disponibles que tenemos para poder realizar una determinada tarea. Cada vez que se falla la tarea se deberá quitar un intento, ¿qué instrucción de proceso debemos escribir para ello?:
                intentos=-1
                intentos=-intentos
                intentos-1
                X intentos=intentos-1
            5. Teniendo en cuenta que el operador “%” calcula el resto de la división entre dos números, dado el siguiente diagrama de flujo:
    MÓDULO 1. FUNDAMENTOS DE INFORMÁTICA.
        1.1 | Informática e Información
            El uso eficaz de la información para la empresa resulta determinante, 
                no solo para sus beneficios,
                sino incluso para su propia supervivencia. 
            La manera en la que se van a tratar y manipular los datos resulta pues crucial.

            En este contexto surge el concepto de informática, que hoy en día
            puede considerarse como 
                la Ciencia que estudia 
                    el tratamiento,
                    elaboración, 
                    transmisión 
                    y utilización de la información. 
            La informática estudia 
                el tratamiento automático de la información
                    utilizando 
                        dispositivos electrónicos 
                        y sistemas computacionales.
            La informática está estrechamente ligada a los ordenadores,
            entendiendo como tal un sistema electrónico capaz de 
                tratar y
                manipular la información, 
                procesando los datos de manera 
                    rápida
                    y segura.
            Hoy en día los ordenadores se han convertido en una herramienta
            indispensable para la vida actual, pues la mayor parte de los
            aparatos que utilizamos hoy en día 
                (ordenadores, teléfonos móviles,televisores, etc.) 
                cuentan con capacidad de computación.
            En informática aparecen involucrados diferentes facetas de las
            ciencias de la computación, como 
                la programación 
                y las metodologías para el desarrollo de software, 
                la arquitectura de ordenadores, 
                las redes de datos (como Internet) 
                y la inteligencia artificial.
        1.2 | El ordenador
            La información para la empresa resulta determinante, 
                no solo para sus beneficios, 
                sino incluso para su propia supervivencia. 
            La manera en la que se van a tratar y manipular los datos resulta pues crucial.

            La informática estudia el tratamiento automático 
                de la información utilizando dispositivos electrónicos 
                y sistemas computacionales.

            Un ordenador es una máquina que permite 
                automatizar el tratamiento de la información. 
                Por sí solo, el ordenador no toma decisiones, 
                carece de inteligencia, 
                simplemente se encarga de realizar las tareas 
                para las que se le ha programado. 
                Estas tareas son definidas 
                en lo que se conoce como un programa.

            Los programas establecen las tareas que el ordenador debe realizar
                con los datos. Básicamente, estas tareas se definen en forma de
                    operaciones aritméticas, 
                    lógicas, 
                    almacenamiento 
                    y recuperación de datos. 
                Los programas, conocidos también como aplicaciones,
                    permiten a los usuarios de un ordenador realizar tareas complejas
                        de forma sencilla 
                        y rápida que de otra manera serían tediosas o imposibles de realizar, 
                            como 
                                realizar cálculos 
                                y manipulaciones de grandes cantidades de datos, 
                                procesar textos e imágenes, 
                                almacenar y gestionar datos, etc.
            En líneas generales, podemos decir que la misión de un ordenador
            es recoger unos datos de entrada, 
        2 Componentes del ordenador
            El ordenador está formado por dos tipos de componentes:
            Hardware. 
                Es la parte física, que la componen 
                    la CPU, 
                    la memoria 
                    y los dispositivos periféricos.
            Software. 
                La forman los elementos lógicos, 
                    como el sistema operativo 
                    y los programas.
                Es el verdadero cerebro del ordenador. 
                Observa el siguiente esquema para ver su interacción con el resto de componentes:        

            2.1 | Unidad central de proceso (CPU)
                Es el verdadero cerebro del ordenador. 
                Su misión consiste en 
                    coordinar 
                    y controlar 
                    o realizar todas las operaciones del sistema. 
                Se comunica con los otros componentes hardware a través de 
                    los buses o canales por donde fluye la información de un bloque a otro.

                La CPU está formada por:

                    • La unidad de control. 
                        Como su nombre indica, es el centro de control del ordenador, 
                        desde ella se localizan y se interpretan las instrucciones 
                        a ejecutar con las correspondientes operaciones que conllevan. 
                        También gestiona la recogida de datos necesarios para 
                        la realización de operaciones, datos que son entregados a 
                        la unidad aritmético-lógica para que opere con ellos, 
                        así como el almacenamiento del resultado de dichas
                        operaciones.
   
                     •  La unidad aritmético – lógica
                        Su función es ejecutar la operación sobre los datos 
                        que recibe de la unidad de control. 
                        . Realiza las operaciones elementales de tipo aritmético y lógico. 
                            Su función es ejecutar la operación sobre los datos que recibe 
                            de la unidad de control.
                            Esta unidad se compone a su vez de dos partes:   
                                • Banco de registros generales, 
                                    que es donde se almacenan los datos que vienen de la unidad de control. 
                                    Uno de estos registros es 
                                        el acumulador, 
                                            donde se van acumulando los resultados de las operaciones y otro es 
                                        el registro temporal, que como su nombre indica, 
                                            almacena de forma temporal datos de entrada
                                • Operador. 
                                    Es el encargado de realizar las operaciones. 
                                    El operador entrega al acumulador el resultado de las operaciones

            2.2 | Memoria
                La memoria o memoria principal es un componente hardware que almacena las instrucciones
                que debe procesar la CPU así como los datos generados por esta durante el procesamiento 
                de las instrucciones de un programa.
                Podemos dividirla en dos tipos:
                    circuitos de memoria rom 
                    memoria ram (expandible e intercambiable)

                Memoria RAM (Random Access Memory): 
                    Esta memoria es de tipo volátil, 
                    lo que significa que la información que contiene solo permanece en ella 
                    mientras el ordenador esta encendido.
                    Su contenido puede ser 
                        leído 
                        y modificado por la CPU. 
                    Es de acceso aleatorio porque la CPU puede acceder directamente a
                    cualquier posición de la misma, sin tener que recorrerla de forma
                    secuencial.
                    Una variante de la memoria RAM es la memoria cache. 
                        Se trata de una parte de la RAM a la que la CPU puede acceder de forma
                        especialmente rápida. 
                        Está destinada a almacenar 
                            instrucciones
                            y datos de uso común por parte de la CPU.
                • Memoria ROM (Read Only Memory): 
                    Memoria solo de lectura,
                    su contenido no puede ser modificado y permanece almacenado
                    de forma permanente, incluso después de apagar el ordenador.
                    Normalmente, esta memoria contiene 
                        instrucciones básicas del sistema operativo del equipo, 
                        es decir, aquellas que son fundamentales para que el ordenador pueda funcionar, 
                        entre ellas las conocidas como 
                            BIOS (Basic Input-Output System) o instrucciones básicas de control de dispositivos.

                    La Memoria ROM se encuentra fijada a la placa base del ordenador, 
                    mientras que la memoria RAM se compone de uno o varios chips insertables, 
                    lo que en muchos ordenadores permite que la capacidad de este tipo de memoria 
                    pueda ser ampliable.
            2.3 | Dispositivos de entrada / salida
                Son aquellos que comunican 
                    el ordenador 
                    con el exterior 
                    y se comunican con la CPU 
                    y la memoria a través de los buses 
                        de entrada/salida.
                Por un lado, tenemos 
                    los dispositivos de entrada, 
                        que permiten al usuario introducir
                            datos, 
                            comandos 
                            y programas en el ordenador. 
                        El dispositivo de entrada más común es un teclado, 
                        a través del cual el usuario teclea la información, 
                        que es convertida en señales eléctricas binarias 
                        (1 y 0) que se almacenan en la memoria central.

                Por otro lado están 
                    los dispositivos de salida,
                        que permiten al usuario ver los resultados de
                            los cálculos 
                            o de las manipulaciones de datos
                            realizados por el ordenador. 
                        El dispositivo de salida más común es el monitor, 
                        que presenta los caracteres y gráficos en una
                        pantalla similar a la de un televisor.
                A continuación, te presentamos algunos
                    de los dispositivos de entrada y salida más
                    utilizados en la actualidad:
                        Teclado. 
                            El teclado es un dispositivo
                            eficaz para introducir datos no gráficos,
                            como aquellos que nos solicitan los
                            programas para su funcionamiento.
                            También dispone de teclas para realizar
                            funciones especiales.
                        • Ratón. 
                            Este dispositivo nos permite dar
                            instrucciones a nuestra computadora
                            a través de un cursor que aparece en 
                            a pantalla mediante la realización de
                            un clic para que se lleve a cabo una
                            acción determinada; a medida que el
                            Mouse rueda sobre el escritorio, el
                            cursor (Puntero) en la pantalla hace lo
                            mismo. El ratón se conecta a uno de los
                            puertos USB del ordenador (conectores
                            universales) a través de un cable, aunque
                            también existen los ratones ópticos que
                            se comunican con señales ópticas y no
                            requieren cableado
                        • Scanner. 
                            Es dispositivo de entrada de
                            información. Permite la introducción
                            de imágenes gráficas al computador
                            mediante un sistema de matrices de
                            puntos, como resultado de un barrido 
                            óptico del documento. La información
                            se almacena en archivos en forma de
                            mapas de bits (bit maps), o en otros
                            formatos más eficientes como Jpeg o Gif.
                        • Cámara Digital. 
                            Es otro dispositivo de
                            entrada que transmite al ordenador
                            las imágenes que capta. Un ejemplo
                            de este tipo de dispositivos es la
                            Webcam, que se trata de una cámara de
                            pequeñas dimensiones y que tiene que
                            estar conectada al PC para. Su uso es
                            generalmente para videoconferencias
                            por Internet, pero mediante el software
                            adecuado, se pueden grabar videos
                            como una cámara normal y tomar fotos
                            estáticas.
                        • Pantalla o monitor. 
                            Permite visualizar
                            la información suministrada por el
                            ordenador. En el caso más habitual se
                            trata de un aparato basado en un tubo
                            de rayos catódicos (CRT) como el de
                            los televisores, mientras que en los
                            portátiles y en ordenadores actuales
                            es una pantalla plana de cristal líquido
                            (LCD).
                        • Impresora. 
                            Se utiliza para presentar
                            información impresa en papel.
                            Actualmente se utilizan impresoras de
                            tinta e impresoras de tóner    
                        • Pendrive o memoria USB. 
                            Una memoria USB (de Universal Serial Bus, en inglés
                            pendrive o USB flash drive) es un pequeño
                            dispositivo de almacenamiento que se
                            conecta al ordenador a través del puerto
                            USB y permite almacenar información de
                            manera permanente. Actualmente, se
                            pueden alcanzar con este tipo memorias
                            capacidades del orden de varias decenas
                            de gigabytes.
                        • CD. El Compact Disc (CD) 
                            es un soporte digital óptico utilizado
                            para almacenar cualquier tipo de nformación (audio, vídeo,
                            documentos y otros datos). En un CD la información se almacena
                            en formato digital, es decir, utiliza un sistema binario para
                            guardar los datos
                         DVD. 
                            Son discos que utilizan un formato de almacenamiento
                            óptico que puede ser usado para guardar datos, incluyendo
                            películas con alta calidad de vídeo y audio. A diferencia de los
                            CD, todos los DVD guardan los datos utilizando un sistema de
                            archivos denominado UDF (Universal Disk Format), el cual es una
                            extensión del estándar ISO 9660, usado para CD de datos.
            2.4 | Memoria
                El sistema operativo 
                    es el componente software más importante del ordenador, 
                    pues se trata de un programa que hace que el propio ordenador funcione                

                    Entre sus funciones principales están:
                        • Proporcionar una interfaz entre el resto de programas del
                            ordenador, los dispositivos hardware y el usuario.
                        • Administrar los recursos de la máquina, como la memoria y la
                            CPU.
                        • Gestionar y organizar los archivos.
                        • Controlar los dispositivos periféricos.

                    Como vemos, es el responsable de que todo funcione adecuadamente
                    dentro del ordenador
                Existen varios tipos de sistemas operativos en función 
                    del número de usuarios simultáneos que lo pueden utilizar,
                    del número de microprocesadores que gestionan, etc. Por ejemplo, un sistema
                        operativo multiusuario 
                            permite que varios usuarios utilicen los
                            programas al mismo tiempo, 
                        mientras que los multiprocesador
                            gestionan máquinas con varias CPU. 
                        También tenemos los sistemas operativos multitarea, 
                            que permiten ejecutar en el ordenador varios programas al mismo tiempo.
                    Los sistemas operativos deben proporcionar una interfaz al usuario
                    a través de la cual éste pueda proporcionarle determinadas órdenes,
                    como 
                        copiar o mover ficheros, 
                        eliminar ficheros, 
                        ejecutar y cancelar programas.
                    Esta interfaz puede ser 
                        a través de un sistema de comandos 
                        O bien a través de un entorno gráfico amigable con el que podemos
                            interaccionar a través del ratón. 
                Actualmente existen muchos Sistemas Operativos, entre los cuales
                    podemos mencionar:
                        • DOS. 
                            Fue uno de los primeros sistemas operativos de ordenador,
                            la interacción con el usuario es a través de comandos.
                        • Windows. 
                            Sistema operativo creado por Microsoft y, sin duda, el
                            más popular. Se basa en la interacción con el usuario a través de
                            interfaz gráfica. Desde que apareció a mediados de los 80, ha ido
                            pasando por muchos cambios y versiones, desde el Windows 3.0
                            hasta el Windows 2010 actual.
                        • Linux. 
                            Se trata de un sistema operativo de libre distribución y es
                            el que más ha crecido en los últimos años, hasta el punto de que
                            actualmente es casi tan utilizado como Windows. Está basado
                            en Unix y, aunque las primeras versiones utilizaban línea de
                            comandos para interaccionar con el usuario, las distribuciones
                            existentes actualmente se basan en interfaz gráfica.
                            Linux no es el producto de una sola compañía, es el resultado
                            de la contribución de un gran número de compañías y grupos de
                            personas. De hecho, el sistema GNU/Linux es un componente
                            central, el cual se transforma en muchos productos diferentes:
                            las llamadas distribuciones.
                            Cada distribución proporciona su propia apariencia y
                            funcionamiento a Linux. Las hay desde grandes sistemas
                            completos, hasta las más ligeras que entran en una memoria
                            USB.
                        • OS MAC.
                            El sistema operativo OS fue creado por Apple para sus
                            ordenadores Mac. Está diseñado sobre una sólida base UNIX
                            para aprovechar el hardware al máximo. Su variante IOS es el
                            sistema operativo que llevan los teléfonos iPhone y las tabletas
                            iPad.
                        • Android. 
                            Android es un sistema operativo creado por Google
                            para ser utilizado en Smarthphones y tabletas de diferentes
                            fabricantes. La mayoría de los dispositivos de este tipo, salvo
                            los Apple, incluyen este sistema operativo. Está basado en
                            Linux, lo que lo hace bastante robusto y seguro. Actualmente,
                            los programas que corren sobre este sistema operativo están
                            escritos en lenguaje Java.

            El sistema operativo
                El sistema operativo es el componente software más importante del ordenador, 
                pues se trata de un programa que hace que el propio ordenador funcione.
                Entre sus funciones principales están:
                    Proporcionar una interfaz entre el resto de programas del ordenador, 
                        los dispositivos hardware y el usuario.
                    Administrar los recursos de la máquina, como la memoria y la CPU
                    Gestionar y organizar los archivos
                    Controlar los dispositivos periféricos

                A continuación, los principales sistemas operativos que puedes encontrar 
                en un ordenador o dispositivo móvil:   
                    windows 10
                    linux 
                    android 
                    mac ios 

        1. Codificación de la información    
            1.1 | Sistema binario
                Los datos, y toda la información en general, 
                son codificados en el interior del ordenador utilizando
                un sistema de numeración conocido como binario. 
                El sistema binario utiliza nada más que dos dígitos para 
                representar la información, el 0 y el 1.

                El sistema numérico binario fue el escogido por los ingenieros
                informáticos para el funcionamiento de los ordenadores, porque
                era más fácil para el sistema electrónico de la máquina distinguir
                y manejar solamente dos dígitos, en lugar de los diez dígitos (del
                0 al 9), que constituyen el sistema numérico decimal. Además, la
                mayoría de los circuitos electrónicos que conforman un ordenador
                sólo puede detectar 
                    la presencia 3.
                    o ausencia de tensión en el circuito.
                A la presencia de tensión en un punto del circuito le asignamos el
                valor 1 y a la ausencia de la misma el valor 0.

                Conversión de binario a decimal
                    Mediante la combinación de unos y ceros podemos representar
                    cualquier valor, por ejemplo, 
                        para representar el número dos
                            utilizaremos la combinación 10, 
                        para el tres sería 11, 
                            mientras que para el cuatro será 100. 
                    Cada posición, representada por n, tiene un
                    valor 2n, siendo 0 la posición más a la derecha:

                    2e6     2e5     2e4     2e3     2e2     2e1     2e0
                     1      0       1       0        0       1        1

                    Según esto, la combinación indicada en la imagen 
                    representaría al número:
                    1*2e6 + 0  +    1*2e4 + 0    +   0 +    2   +   1   
                    64              +16                     +2  +   1=83

                    1 0 1 0 0 1 1 = 83
                    1010011

                    CODIGO CREADO
                       ./binarioAdecimal.html 

                    El sistema binario es un sistema de base dos, dos dígitos, 
                    de ahí que a los componentes que utilizan dicho sistema 
                    se les conozca también como digitales. 
                    A cada posición de un dígito binario se le conoce también como 
                    bit, así el número representado anteriormente estaría formado 
                    por 7 bits.    
                Conversión de decimal a binario
                    Para obtener cual es la representación en binario de cualquier
                    cantidad decimal, se toma este número y se divide entre 2, si el
                    cociente obtenido es mayor que 2, se vuelve a dividir entre 2 y
                    así sucesivamente. El resultado será el último cociente obtenido
                    seguido de los restos de cada división en orden inverso a como se
                    han obtenido. El siguiente ejemplo ilustra gráficamente lo explicado:    
                    72/2=38     resto 1
                    38/2= 19    resto 0
                    19/2= 9     resto 1
                    9/2=4       resto 1
                    4/2=2       resto 0    
                    2/2=1       resto 0
                    1/1=0       resto 1

                    72= 1 0 1 1 0 0 1 = 1001101 
                    <--------------- es inverso

                    CODIGO CREADO
                        ./decimalAbinario.html

                    CONVIERTE DECIMAL A BINARIO
                        https://es.convertbinary.com/decimal-a-binario/+
                        

                    Tabla de números binarios
                        https://es.convertbinary.com/numeros/
            1.2 | Sistema hexadecimal
                El sistema hexadecimal utiliza 
                    16 símbolos para representar los datos.
                    Además de los números del 0 al 9, 
                    se emplean las letras               A, B,  C,  D,  E  y F, 
                        que representarían los números 10, 11, 12, 13, 14 y 15,
                        respectivamente.
                Combinando estos símbolos podemos representar cualquier
                cantidad, teniendo en cuenta que el peso de cada posición tiene un
                valor de 16n. Así pues, 
                    la combinación 5FA representaría al número:
                    = 5         F         A
                    =5*16e2 + 15*16e1 + 10*16e0 
                    =1280   + 240+10
                    =1530
                     4          F       A
                     4*16e2 + 15*16E1 + 10*1660

                El sistema hexadecimal no es utilizado internamente por los
                ordenadores, que como hemos explicado, emplean el binario, 
                sin embargo, resulta muy útil en informática para representar 
                cantidades grandes de datos y el hecho de que 16 sea potencia de 2,
                simplifica la transformación de representación binaria a hexadecimal,
                pues bastará con transformar cada grupo de cuatro bits a su equivalente
                hexadecimal, comenzando por la derecha:
                
                TRANSFORMACIÓN BINARIO A HEXADECIMAL
                        (binarios de 4 bits)
                    1000    1011    0001    1101
                     8       B       1       D

                        CODIGO HTML CREADO 
                            ./4binariosAexadecimal.html
                            ./letraOnumeroAbinario4bits.html

                    Conversión de binario a hexadecimal
                        https://www.calcuvio.com/conversion-binario-hexadecimal


                    convierte de exadecinal a binario 
                        https://es.convertbinary.com/hexadecimal-a-binario/  

                De la misma forma que si hizo para convertir a binario, si queremos
                obtener la representación hexadecimal de cualquier cantidad
                en decimal, debemos dividir esta por 16, así como los diversos
                cocientes obtenidos. El resultado en hexadecimal será el último
                cociente seguido de los restos en orden inverso:
                    3790 / 16
                        14 236 / 16
                            12  14
                    <--------------- inverso        
                    el resultado es 14 12 14
                        3790 =      E  C  E

                        CODIGO HTML CREADO 
                            ./calculaResto.html
            1.3 | Medidas de información   
                Unidad      Abrev.  Se habla de     Representa
                1 bit       bit         bits        unidad mínima
                1 Byte      Byte        bytes       conjunto de 8 bits
                1 kiloByte  KB          kas         1024 Bytes  
                1 MegaByte  MB          megas       1024 KB (1.048.576 bytes)
                1 GigaByte  BG          gigas       1024 MB (1.073.741.824 bytes)
                1 TeraByte  TB          teras       1024 GB (un billón de bytes)

                Como hemos explicado, el sistema binario
                es el que utilizan los computadores para
                representar la información. En este sistema,
                    la unidad de medida básica es el bit, con
                        el que podemos representar solamente
                        dos posibles valores el 0 y el 1. 
                    Para poder referirnos a cantidades mayores, se
                        introdujo el byte, que es la combinación de
                        8 bits. A partir de ahí, se utilizan múltiplos
                    de esta unidad de medida, como el KiloByte,
                        que son 1024 bytes, 
                    o el MegaByte que son 1.024.000 bytes. 

                Dado que la información en el interior de una memoria o un disco
                duro se representa en binario, 
                las unidades de mediada anteriores se utilizan también para expresar 
                las capacidades de estos componentes. 
                Así, cuando decimos que 
                    una memoria tiene una capacidad de 4 gigas, 
                        estamos diciendo que es capaz de almacenar 
                        más de cuatro millones de bytes de información, 
                        dicho de otra manera, podría contener 
                            hasta 4*8=32 millones de ceros y unos de Información
            1.4 | Codificación ASCII - Unicode
                Los sistemas de codificación se utilizan para 
                    representar 
                    y almacenar la información en memoria.
                En la década de 1960, se adoptó el código ASCII 
                    como estándar para representación de 
                    los caracteres del alfabeto latino 
                    tal como se usa en inglés moderno 
                    y en otras lenguas occidentales                
                Código ASCII  
                    En ASCII Cada carácter alfanumérico tiene asignado una combinación
                    binaria de 8 bits (byte), con lo que utilizando este sistema de
                    codificación podríamos representar 
                        hasta 256 símbolos. 
                    Datos y programas son codificados en este sistema 
                    dentro del ordenador.
                    Los símbolos que puede representar el código ASCII se pueden
                    dividir en tres grupos:  
                        • Caracteres de control. 
                            No representan caracteres con una representación visual, 
                            sino que, como su nombre indica, tienen
                            funciones de control, como por ejemplo 
                                la tecla escape, 
                                el control de carro, 
                                la tabulación, etc. 
                            Este grupo de símbolos
                            están representados con los códigos ASCII 
                            del 0 al 31 y también el 127
                        • Caracteres alfanuméricos. 
                            Se trata de 
                                los números, 
                                las letras del alfabeto 
                                y otros símbolos utilizados 
                                    en la escritura de texto.
                            Están representados por los códigos que van 
                                del 32 al 126.    
                ASCII extendido   
                    Se emplea para representar caracteres especiales, como
                        letras acentuadas 
                        y con diéresis, 
                        la letra ñ, etc. 
                        
                    Los códigos correspondientes a estos caracteres van 
                        del 128 a 255.
            
            PRUEBA
                Test superado
                Has obtenido un 100 en esta tarea

                1 kilobyte (KB) = 1024 bytes
                1 megabyte (MB) = 1024 kilobytes

                Primero, convirtamos 3.4 megabytes a bytes:
                    3.4MB=3.4×1024KB×1024bytes/KB
                    3.4MB=3,584KB×1024bytes/KB
                    3.4MB=3,665,216bytes
                 
                1. Indica cual de los siguientes elementos no corresponde a un dispositivo de entrada y salida:
                    CD-ROM
                    X Memoria ROM
                    Impresora
                    Scanner

                2. Las operaciones sobre los datos manejados por un programa son realizadas por:
                    La memoria RAM
                    La memoria cache
                    X La CPU
                    La memoria ROM

                3. 4 MB son aproximadamente:
                    X 4.000.000 bytes
                    4.000 bytes
                    40.000  bits
                    400.000 bits

                4. La representación en binario del número hexadecimal 4FA es:
                    110001110110
                    111111110001
                    010100001111
                    X 010011111010

                    "&" se representa con el código decimal 38 (SE VE EN LA TABLA ASCCII), que en binario es 00100110

                5. El símbolo & se representa internamente en el ordenador:
                    X Mediante la combinación 00100110
                    Directamente como &, pues es un símbolo ASCII
                    Este símbolo no tiene representación
                    Mediante la combinación 0&h  
    Módulo 2. Introducción a la programación.
        Un ordenador es un sistema ciertamente complejo que cuenta con
        unos elementos hardware ciertamente sofisticados y potentes, pero
        por muy complejo que sea no es capaz de realizar ninguna tarea por
        sí mismo. Para que pueda llevar a cabo las numerosas funciones que
        estamos acostumbrados a ver habitualmente en los ordenadores
        modernos, como realizar complicados cálculos, procesar imágenes,
        datos y textos, comunicarse con otros equipos, etc., es necesario
        la existencia de un programa que transmita una serie de órdenes a
        bajo nivel al ordenador de modo que, al ser ejecutadas de manera
        conjunta y ordenada, consigan completar una determinada tarea útil
        para el usuario
            Un ordenador, es capaz de realizar únicamente tres tipos de
            operaciones:

                • Operaciones aritméticas básicas.
                • Operaciones de tipo lógico (comparar dos valores.)
                • Almacenamiento y recuperación información.

                Estas tres operaciones convenientemente ligadas entre sí forman lo
                que llamamos un programa.
        1.1 | Programas y algoritmos
            PROGRAMA
                Un programa en definitiva es un conjunto de órdenes que ejecuta el ordenador para conseguir un
                objetivo. Las órdenes se proporcionan a través de un lenguaje de programación (códigos). A estas
                órdenes escritas en un determinado lenguaje de programación se les llama también instrucciones.
                De forma general este conjunto de instrucciones toma unos datos de entrada y devuelve unos datos
                de salida, o resultados.

                El ordenador siempre funciona bajo control de un programa,
                incluso las operaciones más básicas que hace el ordenador, como
                    comunicarse con los dispositivos de entrada/salida, 
                    interaccionar con el usuario, 
                    gestionar los propios recursos del ordenador, etc.,
                son realizados por un programa llamado sistema operativo, 
                que es el programa más importante que ejecuta un ordenador.
                Los programas que se ejecutan en un ordenador se encuentran
                en unidades de almacenamiento permanente, como 
                    el disco duro,
                    un disco óptico, 
                    o un pendrive, 
                    incluso la memoria ROM, donde se almacena para del núcleo 
                    del sistema operativo. 
                    Cuando el ordenador recibe la orden de ejecutar un programa, 
                    éste, o parte de él, es cargado en la memoria RAM del ordenador 
                    para su ejecución.

                    ENTRADA DE DATOS – PROCESAMIENTO – SALIDA DE DATOS
            ALGORITMO    
                Para realizar un programa, los programadores definen un algoritmo.
                Un algoritmo es la descripción exacta y sin ambigüedades de la
                secuencia de pasos elementales a aplicar a un proceso para, 
                    que a partir de unos datos iniciales, 
                    se obtenga la solución buscada a un problema determinado. 
                Un programa es la expresión de un algoritmo
                en un lenguaje de programación entendible por el ordenador.    
        1.2 | Lenguajes de programación 
            Los lenguajes de programación proporcionan 
            la notación utilizada para la escritura de los programas.
            Para la escritura de los programas o aplicaciones informáticas actuales, 
            el programador utiliza un lenguaje de programación denominado “de alto nivel”, 
            que le permite escribir las instrucciones siguiendo una notación 
            “entendible” para el programador, no así para el ordenador.

            Para que el ordenador pueda entender las órdenes contenidas en un
            programa cualquiera escrito por el programador en lenguaje de “alto
            nivel”, es necesario traducir estas instrucciones a otras “de bajo nivel”
            que puedan ser entendidas por el ordenador. Este código de bajo
            nivel, conocido como “código máquina”, está compuesto solamente
            de unos y ceros, es el único que entiende el ordenador y es el que le
            permite interpretar las órdenes contenidas de los programas para
            que las pueda ejecutar

            Tipos de lenguaje de programación
                Según el nivel, es decir, la cercanía de las instrucciones del lenguaje
                de programación con el lenguaje humano, estos se pueden agrupar
                en tres tipos:
                    • Lenguajes de bajo nivel.
                    • Lenguajes de nivel intermedio.
                    • Lenguajes de alto nivel.
                Lenguajes de bajo nivel
                    Se trata de lenguajes cuyo juego de instrucciones son entendibles
                    directamente por el hardware. El lenguaje de bajo nivel que utilizan
                    los ordenadores es el conocido como “código máquina”, y está
                    formado por unos y ceros, es decir, código binario, lo que entiende
                    directamente el microprocesador.
                    Además de la complejidad que supone escribir programas de esta
                    manera, cada tipo de microprocesador dispone de su propio juego
                    de instrucciones o combinaciones de ceros y unos con las que se
                    puede indicar a este las tareas a realizar, por lo que un programa en
                    código máquina solo puede utilizarse en la máquina para la que se
                    programó 
                Lenguajes de nivel intermedio
                    Se les conoce con ese nombre porque están a medio camino 
                    entre el código máquina y los lenguajes de alto nivel. 
                    El lenguaje de ensamblador fue el primer lenguaje 
                    de nivel intermedio en desarrollarse,
                    con el objetivo de sustituir el lenguaje máquina 
                    por otro más similar a los utilizados por las personas.

                    Cada instrucción en ensamblador equivale a una instrucción
                    en lenguaje máquina, utilizando para su escritura palabras
                    nemotécnicas en lugar de cadenas de bits.
                    El juego de instrucciones del lenguaje ensamblador está formado
                    por palabras abreviadas procedentes del inglés 
                        (Ejemplo: MOV A,B). 
                    La programación en lenguaje ensamblador precisa de un amplio
                    conocimiento sobre la constitución, estructura y funcionamiento
                    interno de un ordenador, ya que maneja directamente las posiciones
                    de memoria, registros del procesador y demás elementos físicos.
                    El siguiente listado muestra un ejemplo de programa escrito en
                    lenguaje ensamblador:  

                        INICIO: ADD B, 1
                            MOV A, E
                            CMP A, B
                            JE FIN
                            JMP INICIO
                        FIN : END    

                    Al igual que en el caso del código máquina, los programas escritos
                    en ensamblador son dependientes del procesador para el que se
                    han creado.
                    Aunque fue el primer lenguaje de programación que se empezó a
                    utilizar para ordenadores, actualmente no se utiliza en la creación
                    de programas para usuarios de ordenador, su uso está limitado a
                    la programación de microcontroladores y dispositivos electrónicos.
                Lenguajes de alto nivel
                    Se les llama lenguajes de alto nivel porque el conjunto de órdenes 
                    que utilizan son fáciles de entender y aprender. 
                    Además no hay incompatibilidades entre un microprocesador y otro, 
                    por lo que un programa escrito para un ordenador puede ser utilizado en otro. 

                    Como inconveniente destacable, está la necesidad de traducir
                    los programas escritos en un lenguaje de alto nivel a un lenguaje
                    máquina o ensamblador para que pueda ser ejecutado por la unidad
                    central de proceso, lo que significa disponer necesariamente de un
                    software traductor 
                        (ensamblador, compilador o intérprete) 
                        para cada tipo de ordenador utilizado. 
                    Más adelante, hablaremos de estos paquetes software.
                    El siguiente listado corresponde a un programa escrito en un
                    lenguaje de programación de alto nivel:

                        int c=20;
                        int sum;
                        for(int i=1;i<=c;i++){
                            sum=sum+I;
                        }
                        System.out.
                        println(sum);

                    El abanico de lenguajes de programación de alto nivel existentes
                    hoy en día es enorme y no para de crecer. Entre más utilizados en la
                    actualidad tenemos:
                        • Java. 
                                Se trata de uno de los lenguajes de programación más
                                utilizados actualmente, apareció a principios de los años 90
                                y desde entonces su uso no ha hecho más que extenderse.
                                Puede ser utilizado para crear programas para muy diferentes
                                fines, como aplicaciones de escritorio, aplicaciones para Web,
                                incluso programas para dispositivos electrónicos como tabletas
                                o smartphones.
                                Una de las características más interesantes de este lenguaje
                                es que es multiplataforma, lo que significa que un programa
                                compilado en Java puede ser ejecutado en diferentes sistemas
                                operativos.
                        • JavaScript. 
                                Aunque de nombre similar a Java, solo se parece a
                                éste en los fundamentos sintácticos. 
                                JavaScript es un lenguaje interpretado, 
                                utilizado en la creación de scripts en páginas Web,
                                es decir, bloques de código integrados dentro de una página y
                                que son interpretados y ejecutados por el navegador Web al
                                procesar dicha página.    
                        • C. Es un lenguaje de programación muy popular. Se desarrollo a
                                principios de los años 70 y se caracteriza porque permite crear
                                código muy eficiente que optimiza los recursos del ordenador.
                                Este lenguaje es el que se utiliza en la creación de muchos
                                sistemas operativos, como
                                    Unix 
                                    o Windows. 
                                Aunque dispone de estructuras sintácticas propias de un lenguaje de alto nivel,
                                también incorpora instrucciones de bajo nivel que permiten un
                                control de los recursos hardware, lo que le hace muy apropiado
                                en entornos donde estos recursos puedan ser limitados.
                            • Visual Basic. 
                                Muy popular en los años 80 por su simplicidad y
                                potencia, con pocas líneas de código se pueden realizar muchas
                                tareas. Es el lenguaje de programación con el que se crearon las
                                primeras aplicaciones para Windows.
                            • PHP. 
                                Dispone de un amplio juego de instrucciones especialmente
                                diseñadas para la creación de programas en entorno Web.
                                Su código es interpretado por un servidor Web que genera
                                dinámicamente páginas en HTML, lo que le hace adecuado para
                                este tipo de entornos. También dispone de instrucciones para
                                acceder a bases de datos de tipo MySQL.
                            • C#. 
                                Se trata de una versión actualizada del lenguaje C que
                                Microsoft creo a finales de los 90 para incorporarlo a la plataforma
                                .NET. Con el se pueden desarrollar aplicaciones Windows, Web y
                                móviles de forma sencilla, al estilo de Visual Basic, pero con la
                                elegancia y precisión de C.    
                            • Ruby. 
                                Es un lenguaje de programación cuya aparición se remonta
                                a mediados de los 90, pero que es últimamente cuando está
                                adquiriendo mayor popularidad. Se trata de un lenguaje dinámico
                                y de código abierto y está enfocado a la productividad. Se aplica
                                especialmente sobre la plataforma on-rails para el desarrollo de
                                aplicaciones para Web 
        
        1. Ensambladores, compiladores e intérpretes
            Cuando utilizamos un lenguaje distinto al lenguaje máquina, 
            los programas elaborados en dicho lenguaje deben ser traducidos a código binario 
            a fin de que las instrucciones en ellos especificadas
            puedan ser entendidas y ejecutadas por el ordenador

            Esta tarea de traducción del programa, denominado 
                código fuente,
            a código entendible por el microprocesador, denominado 
                código objeto, 
            es realizada por un software traductor que, dependiendo
            de la naturaleza del código fuente y la manera en la que realice la
            traducción, se denomina 
                ensamblador, compilador o intérprete.
            1.1 | Ensambladores
                Un ensamblador es un programa que traduce
                     el código de un programa 
                        escrito en ensamblador 
                        a código máquina 
                entendible por el ordenador. 
                Estos programas suelen venir ya incorporados en el
                propio ordenador, ya que cada tipo de microprocesador 
                dispone de su propio juego de instrucciones
                en ensamblador.
            1.2 | Compiladores
                Un compilador es un software que traduce 
                    el código fuente escrito en un lenguaje de programación de alto nivel, 
                    a código ejecutable por el ordenador,
                        normalmente código máquina, 
                        aunque en algunos casos se traduce a un código intermedio 
                        que posteriormente es interpretado durante la ejecución del programa. 
                Cada lenguaje
                de programación de alto nivel requiere de su propio software
                compilador.
                Durante la fase de compilación, el código fuente se suministra a través
                de un archivo de texto que contiene el conjunto de instrucciones que
                forma el programa. Como resultado de la compilación, se genera
                un nuevo archivo en código binario que, dependiendo del caso,
                puede ser directamente ejecutado o requerir un nuevo proceso de
                traducción posterior.

                La siguiente imagen nos muestra un ejemplo de compilación
                de un programa escrito en Java. Como vemos, el código fuente
                se suministra en archivos de texto .java y como resultado de la
                generación se genera uno o varios archivos de código objeto con
                extensión .class, que deberán ser traducidos a código máquina en el
                momento de ejecutar el programa

                        .java                                            .class
                    Código Java   -->      Compilador Java    -->        bytecodes 

                Durante la compilación de un programa tienen lugar las siguientes
                acciones:
                    • Análisis léxico. 
                        El programa se divide en tokens o secuencias de
                        caracteres que tienen un significado. En esta fase, se detectan
                        las palabras reservadas, signos de puntuación, variables etc.
                    • Análisis sintáctico. 
                        Los tokens se agrupan jerárquicamente en
                        frases gramaticales que el compilador utiliza para sintetizar
                        la salida. Se comprueba si lo obtenido de la fase anterior es
                        sintácticamente correcto.
                    • Análisis semántico. 
                        Durante esta fase se revisa el programa
                        fuente para tratar de encontrar errores semánticos y reúne la
                        información sobre los tipos para la fase posterior de generación
                        de código.
                        • Síntesis. 
                            Se genera el código objeto.
                        • Optimización. 
                            Se optimiza el código generado en la fase anterior
                            de modo que resulte más rápido de ejecutar.
            1.3 | Intérpretes
                Un intérprete realiza la traducción del programa fuente 
                y lo ejecuta directamente, sin generar ningún código objeto. 
                    La traducción o interpretación 
                    y la ejecución no se realizan 
                    como procesos independientes, s
                    ino en una misma operación e instrucción por instrucción, respetando
                rigurosamente el orden establecido en ellas.

                Un ejemplo de lenguaje interpretado es JavaScript. El código fuente
                de un programa escrito en JavaScript se encuentra embebido dentro
                de una página Web. Cuando la página es procesada por el navegador,
                éste realiza la interpretación del script, es decir, traduce y ejecuta las
                instrucciones secuencialmente.

                También el código objeto o bytecodes, generado durante la
                compilación de un programa Java, sufre un proceso de interpretación
                durante la fase de ejecución de dicho programa. En ese momento,
                un software conocido como Máquina Virtual Java traduce y ejecuta
                cada línea de bytecodes.
            1.4 | Linkados
                En algunos lenguajes de programación, 
                un programa fuente que ha sido compilado y por tanto
                traducido a lenguaje máquina, es decir, 
                convertido en programa objeto, es un programa que todavía
                no es ejecutable. Esto es así porque el código objeto generado 
                necesita de otras librerías de código externas para poderse ejecutar.
                
                Un programa linkador o montador tiene
                como misión resolver los direccionamientos
                del código objeto a las librerías de código
                externas y combinar el conjunto de ambos
                en lo que se conoce como un ejecutable,
                que es un archivo de código máquina o
                binario con extensión .exe que puedes ser
                ejecutado directamente en el ordenador.
                Normalmente, un .exe es dependiente
                del sistema operativo para el que se ha
                generado, por lo que no podría considerarse
                como un archivo multiplataforma, es decir,
                que pueda ser ejecutado en cualquier
                ordenador.   
                
                    Código fuente ->  Compilador -> Código objeto ->  Módulos externos ->   Montador  ->  Código ejecutable (.exe)

            1.5 | Entornos de desarrollo integrado
                Los entornos de desarrollo integrados, conocidos como IDE, son programas informáticos
                creados con el objetivo de facilitar 
                    la creación, 
                    depuración 
                    y testeo de programas 
                    escritos con un determinado lenguaje de programación.
                Los entornos de desarrollo ofrecen al programador todo lo necesario para que pueda realizar
                los programas, como 
                    un editor de texto para poder escribir el código con ayudas en línea que le
                        informan de posibles errores de sintaxis, 
                    un compilador para poder generar el código objeto, 
                    un linkador, 
                    opciones para depurar los programas y ejecutarlos paso a paso en busca de errores, etc.
                Durante el estudio de los lenguajes de programación dentro del itinerario abordaremos con detalle
                el manejo de un IDE en concreto, sin embargo, ahora te vamos a presentar algunos de los más
                utilizados en la actualidad.

                Netbeans
                    El entorno de desarrollo Netbeans 
                    es uno de los más utilizados por la comunidad de desarrolladores.
                    Se trata de un programa de libre distribución 
                    que puede descargarse desde la dirección netbeans.org, 
                    con el que puedes crear programas en lenguaje Java, PHP y C
                    Es muy sencillo de manejar y ofrece muchas facilidades para la
                    escritura de los programas. Permite realizar desde programas
                    sencillos basados en la interacción con el usuario a través de la línea
                    de comandos, hasta complejas aplicaciones para entorno Web.
                Eclipse
                    Es el entorno de desarrollo más extendido entre la comunidad de
                    desarrolladores Java. Al igual que netbeans, es de libre distribución
                    y podemos descargarlo desde la dirección https://eclipse.org/
                    downloads/ Se trata de un IDE para creación de programas Java en
                    todos los entornos: aplicaciones de escritorio, Web, etc. Incluso es
                    el entorno de desarrollo más utilizado en la creación de programas
                    para dispositivos Android.  

                Visual Studio .NET
                    Es el entorno de desarrollo de Microsoft para la creación programas
                    para Windows y Web sobre sistema operativo Windows. Puede
                    utilizarse con cualquiera de los lenguajes que forman la plataforma
                    .NET, como Visual Basic y C#.    

            PRUEBA TEORICA
                Test superado
                Has obtenido un 100 en esta tarea

                Tus respuestas
                1. Una variable es:
                    Un tipo de dato utilizado en un programa
                    Un mecanismo para creación de algoritmos
                    Una instrucción de control
                    X Una zona de memoria que almacena un dato
                2. El lenguaje que manipula registros del procesador es:
                    Lenguaje máquina
                    Lenguaje C
                    Cualquier lenguaje de alto nivel
                    Lenguaje ensamblador
                3. Indica cual de las siguientes es una diferencia entre un compilador y un intérprete:
                    Un compilador genera código ejecutable puro, mientras que el intérprete genera código intermedio
                    X Un compilador genera un archivo de código objeto, mientras que el intérprete no genera ningún archivo intermedio
                    Un compilador genera código binario, mientras que el intérprete genera código en ensamblador
                    Un compilador solo es aplicable a lenguajes de alto nivel, mientras que el intérprete se emplea con lenguajes de código intermedio.

                4. En un programa tenemos una variable llamada “intentos” que almacena el número de intentos disponibles que tenemos para poder realizar una determinada tarea. Cada vez que se falla la tarea se deberá quitar un intento, ¿qué instrucción de proceso debemos escribir para ello?:
                    intentos=-1
                    intentos=-intentos
                    intentos-1
                    X intentos=intentos-1
                5. Teniendo en cuenta que el operador “%” calcula el resto de la división entre dos números, dado el siguiente diagrama de flujo:
                Indica los valores de las variables total y cont al finalizar el programa, suponiendo que los números leídos fueran: 2, 4, 5, 1, 9, 17, 25, 16, 30 y 11:
                    total=0, cont=2
                    X total=4, cont=10
                    total=5,cont=11
                    total=6,cont=0
    MÓDULO 3. PSEUDOCÓDIGO.
                    El pseudocódigo consiste en expresar mediante un lenguaje coloquial 
                    las operaciones que describen el algoritmo asociado a un programa informático. 
                    Básicamente, se trata de traducir las operaciones que se describen en un organigrama 
                    a frases del lenguaje común, sin emplear símbolos.

                    El lenguaje utilizado para describir los algoritmos mediante pseudocódigo, 
                    debe ser fácil de interpretar por parte de una persona. 
                    Las palabras y expresiones utilizadas en los mismos deberán indicar de forma 
                    clara y precisa las tareas a realizar.    

                    Y es que, el objetivo del pseudocódigo es intentar describir un
                    algoritmo de la forma más detallada posible y, a su vez, próxima a un
                    lenguaje de programación de alto nivel, de manera que la traducción
                    final al código real durante la fase de implementación sea lo más
                    sencilla posible, de ahí que se le llame pseudocódigo.
                    Seguidamente vamos a ver unos ejemplos que nos van a ir aclarando
                    como plantear un pseudocódigo y las estructuras típicas que se
                    utilizan.  
                        Inicio
                            leer a, b
                            si (a==b) entonces
                                mostrar “Son iguales”
                            sino
                                si (a>b) entonces
                                    mostrar “El mayor es”, a
                                sino
                                    mostrar “El mayor es”, b
                                fin si
                            fin si
                        Fin  
                    Como vemos, el esquema es similar al que se sigue en los
                    ordinogramas pero sin la utilización de símbolos. En el caso
                    de estructuras complejas, como las instrucciones alternativas,
                    utilizamos palabras especiales como si..entonces..sino..fin si, para
                    definir las operaciones y delimitar su ámbito.
                    Al no seguir un esquema gráfico como el ordinograma, durante la
                    definición de un pseudocódigo 
                        es conveniente indentar (escribir con espacios o tabulaciones a la izquierda) 
                        aquellas instrucciones o bloques de instrucciones que forman parte de otras, 
                        a fin de aclarar la estructura del algoritmo.
                    Aunque hay lenguajes de programación de alto nivel que si lo hacen,
                    nosotros no haremos distinción entre mayúsculas y minúsculas a la
                    hora de escribir un pseudocódigo.
                    En este otro ejemplo tenemos el bloque de pseudocódigo que
                    describe el algoritmo a seguir por un programa encargado de mostrar
                    la suma de todos los números naturales comprendidos entre 1 y un
                    número leído:
                        Inicio
                            suma=0
                            cont=1
                            leer n
                            etiqueta1:
                            suma=suma+cont
                            si(cont<n) entonces
                                cont=cont+1
                                ir a etiqueta1
                            sino
                                mostrar suma
                            fin si	
                        Fin

                    En el pseudocódigo anterior vemos el uso de etiquetas, como la
                    expresión “etiqueta 1:”, que sirven para marcar ciertas partes del
                    programa, de modo que podamos utilizar dichas etiquetas como
                    referencia a la hora pasar el control del programa a ese punto.  

                    Sin la utilización de saltos, que muchas veces dificultan el seguimiento
                    de un algoritmo, el programa anterior podría haberse escrito de esta
                    otra manera utilizando una estructura repetitiva:  

                        Inicio
                        suma=0
                        cont=1
                        leer n
                        mientras (cont<=n)
                            suma=suma+cont
                            cont=cont+1
                        fin mientras
                        mostrar suma
                        Fin

                    Con la estructura repetitiva mientras, lo que queremos expresar es
                    que mientras se cumpla la condición indicada en el paréntesis, el
                    programa tendrá que ejecutar el bloque de sentencias codificadas
                    en su interior (las que aparecen entre mientras y fin mientras).
                    Su funcionamiento es el siguiente: cuando el programa llega a la
                    instrucción mientras, se comprueba la condición y, si esta es cierta,
                    se ejecutará el bloque de sentencias. Después de ejecutar la última
                    sentencia del bloque, el programa vuelve a comprobar la condición
                    del mientras y, si vuelve a cumplirse, de nuevo se ejecuta el conjunto
                    de instrucciones. 

                    Así sucesivamente hasta que la condición sea falsa, en cuyo caso el
                    programa continuará con las instrucciones situadas después de fin
                    mientras.
                    Según indicamos en el apartado anterior, la estructura mientras
                    tendría la siguiente forma representándola con este sistema

                    Como ya hemos visto durante el estudio de los ordinogramas y
                    analizaremos con más detalle durante el estudio de las técnicas de
                    programación estructurada, existen distintas variantes a la hora de
                    implementar una estructura repetitiva, como que la condición sea
                    evaluada después de la ejecución de las instrucciones en vez de
                    antes, o que el bloque de sentencias se ejecute un número definido
                    de veces controlado por un contador.
                    El siguiente pseudocódigo corresponde al ejercicio resuelto
                    presentado en el apartado anterior, consistente en un algoritmo que
                    realiza la lectura y suma de números hasta que el usuario indica que
                    no quiere introducir más números:
                        Inicio
                            suma=0
                            Hacer
                                leer n
                                suma=suma+n
                                mostrar “¿Desea introducir otro número?”
                                leer op
                                    Mientras (op==”si”)
                                    Mostrar suma
                        Fin

                    En este caso utilizamos la expresión Hacer…Mientras, para ejecutar
                    primero el bloque de sentencias que se deben repetir y preguntas al
                    final por la condición, de modo que si esta condición se cumple, se
                    volverá a ejecutar de nuevo el conjunto de instrucciones indicadas
                    dentro de hacer.
                1.1 | Normas en la creación de pseudocódigo
                    Aunque cada persona es libre de definir sus propias normas a la hora de 
                    crear pseudocódigo, a fin de conseguir este objetivo,
                    es necesario seguir una serie de reglas básicas y de sentido común, entre
                    las que podríamos destacar:
                        • Disponer de un juego limitado de instrucciones. 
                            Es importante
                            que a la hora de definir un algoritmo mediante pseudocódigo,
                            utilicemos siempre el mismo juego de instrucciones y con ellas
                            resolver cualquier problema de programación.
                        • Utilizar estructuras lógicas de control. 
                            Además de lo que serían
                            las instrucciones de proceso (asignación de datos a una variable,
                            operación aritmética entre variables, etc.), se debe disponer
                            de un juego de instrucciones que expresen las operaciones de
                            control de flujo que se llevan a cabo habitualmente en cualquier
                            programa, como las alternativas simples y múltiples o las de tipo
                            repetitivo.
                        • Separación de datos y código. 
                            Cuando se van a manejar varios
                            datos en un programa, conviene separar la declaración de esos
                            datos a utilizar de lo que serían las instrucciones de manipulación
                            de los mismos.

                            Según la última de las reglas que acabamos de presentar, conviene
                            a la hora de diseñar el pseudocódigo de un algoritmo definir
                            previamente las variables de los datos que se van a manipular y,
                            cuando proceda, inicializar las mismas. Esto permite, antes de
                            empezar con el código, aclarar con qué datos vamos a trabajar.
                            A la hora de declarar las variables, se indicará el nombre de la variable
                            seguido del tipo de dato con el que vamos a trabajar:

                                Nombre_variable tipo

                            A continuación, mostramos una versión del programa anterior en el
                            que se realiza una separación entre datos y código   
                                Inicio
                                    suma=0
                                    Hacer
                                    leer n
                                    suma=suma+n
                                    mostrar “¿Desea introducir otro número?”
                                    leer op
                                        Mientras (op==”si”)
                                        Mostrar suma
                                Fin 
                            Los nombres de los tipos de datos los indicaremos según nuestro
                            criterio, aunque será conveniente estandarizarlos. Más adelante
                            daremos unas indicaciones sobre los tipos de datos habituales que
                            podemos encontrarnos en un programa.

                            Veamos otro algoritmo de ejemplo en pseudocódigo. Corresponde al
                            de un programa encargado de leer un número y mostrar el factorial
                            de dicho número.  

                            El factorial de un número se calcula multiplicando todos los números
                            naturales menores de ese número hasta 1. Por ejemplo, el factorial
                            del 5 se calcularía  

                                5*4*3*2*1

                            He aquí el algoritmo:

                                Inicio
                                    Datos:
                                    factorial entero
                                    cont entero
                                    n entero
                                    Código:
                                factorial=1
                                Leer n
                                cont=n
                                    Mientras (cont>=1)
                                        factorial=factorial*cont
                                        cont=cont-1
                                    Fin mientras
                                    mostrar factorial
                                Fin    

                                En este ejemplo mostrado se trata de ir multiplicando los números
                                naturales comprendidos entre 1 y el número leído.
                                Una vez más, para ir ejecutando repetidas veces una tarea tenemos
                                que echar mano de la instrucción mientras. 

                                Para controlar el número de multiplicaciones realizadas, utilizamos
                                una variable contador que se inicializa al número leído y que con cada
                                multiplicación se decrementa en una unidad. La variable factorial se
                                utiliza como acumulador de las multiplicaciones

                1.2 | Seguimiento de algoritmos
                    El seguimiento de algoritmos es un ejercicio mental que,
                    como su nombre indica, consiste en seguir
                    la lógica de un algoritmo, en nuestro caso escrito mediante pseudocódigo, 
                    tal y como lo haría un ordenador, a fin de determinar el valor final 
                    de ciertas variables.
                    Este ejercicio mental nos va ayudar a comprender el funcionamiento
                    de las estructuras lógicas utilizadas en programación, lo que sin
                    duda va a contribuir enormemente a adaptar nuestra mente a la
                    lógica de programación.  

                Casos prácticos "Pseudocódigo"
                    A continuación te preesentamos un caso práctico relacionado con  
                    pseudocódigo. Lee atentamente y desarrolla la actividad planteada. 
                    Puedes compartirla en el foro con tus compañeros.      
                    1 - Realización de algoritmos en pseudocódigo
                        ALGORITMO 1
                            Realiza el algoritmo correspondiente a un programa que lea un
                            número y muestre un texto indicando si el número es o no primo


                            Un número primo es un número mayor que 1 
                            que no tiene divisores exactos más allá de 1 y sí mismo. 
                            En otras palabras, un número primo solo es divisible por 1 y por sí mismo. 
                            Aquí hay algunos ejemplos de números primos:

                            2 es el único número primo par.
                            3 es primo, ya que solo es divisible por 1 y 3.
                            5 es primo, ya que solo es divisible por 1 y 5.
                            7 es primo, ya que solo es divisible por 1 y 7.
                            11 es primo, ya que solo es divisible por 1 y 11.
                            Y así sucesivamente.
                            2,3,5,7,11

                            Número primo (Ejemplo: 5):

                            5 es divisible por 1 (5 ÷ 1 = 5).
                            5 es divisible por 5 (5 ÷ 5 = 1).
                            No hay otros números enteros que dividan exactamente a 5.
                            En este caso, los únicos divisores exactos de 5 son 1 y 5.

                            Número no primo (Ejemplo: 6):

                            6 es divisible por 1 (6 ÷ 1 = 6).
                            6 es divisible por 2 (6 ÷ 2 = 3).
                            6 es divisible por 3 (6 ÷ 3 = 2).
                            6 es divisible por 6 (6 ÷ 6 = 1).
                            En este caso, 6 tiene más divisores exactos que 1 y 6. Por lo tanto, no es un número primo.

                            Inicio
                                Código:
                                ingrese numero 
                                valida si el numero es primos
                                si numero es primo 
                                        presenta texto "El numero es primo"
                                    de lo contrario
                                        presenta texto "El numero no es primo"
                            Fin

                            Inicio:
                                Datos:
                                    Numero entero
                                Código:
                                    Escribir "Ingrese un número:"
                                    Leer Numero

                                    Si Numero es menor o igual a 1 entonces
                                        Escribir "El número no es primo, ya que es menor o igual a 1."
                                    Sino si Numero es igual a 2 entonces
                                        Escribir "El número es primo, ya que 2 es el único número primo par."
                                    Sino
                                        Divisor <- 2
                                        Primo <- Verdadero

                                        Mientras Divisor * Divisor <= Numero y Primo es Verdadero hacer
                                            Si Numero es divisible por Divisor entonces
                                                Primo <- Falso
                                            Fin Si
                                            Divisor <- Divisor + 1
                                        Fin Mientras

                                        Si Primo es Verdadero entonces
                                            Escribir "El número es primo."
                                        Sino
                                            Escribir "El número no es primo."
                                        Fin Si
                                    Fin Si
                            Fin

                            <!DOCTYPE html>
                            <html lang="es">
                                <head>
                                    <meta charset="UTF-8">
                                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                    <title>Verificar si un número es primo</title>
                                </head>
                                <body>
                                    <script>
                                        function esPrimo(numero) {
                                            if (numero <= 1) {
                                                return false;
                                            }
                                            for (let i = 2; i <= Math.sqrt(numero); i++) {
                                                if (numero % i === 0) {
                                                    return false;
                                                }
                                            }
                                            return true;
                                        }
                                        function verificarNumero() {
                                            var inputNumero = document.getElementById('numero');
                                            var numero = parseInt(inputNumero.value);
                                            var mensaje = esPrimo(numero) ? "El número es primo." : "El número no es primo.";
                                            document.getElementById('resultado').innerHTML = mensaje;
                                        }
                                    </script>
                                    <h1>Verificar si un número es primo</h1>
                                    <label for="numero">Ingrese un número:</label>
                                    <input type="number" id="numero">
                                    <button onclick="verificarNumero()">Verificar</button>
                                    <p id="resultado"></p>
                                </body>
                            </html>


                             
                            if (numero <= 1) {
                                return false;
                            }
                            verifica si el número es menor o igual a 1. 
                            Si es así, retorna false porque
                            los números menores o iguales a 1 no son primos.

                            for (let i = 2; i <= Math.sqrt(numero); i++) {
                                if (numero % i === 0) {
                                    return false;
                                }
                            }
                            Este bucle itera desde 2 hasta la raíz cuadrada del número. 
                            No es necesario verificar divisores más allá de la raíz cuadrada 
                            para determinar si un número es primo. 
                            Si encuentra algún divisor (numero % i === 0), 
                            significa que el número no es primo 
                            y la función devuelve false.

                        ALGORITMO 2
                            Diseñar un algoritmo que lea dos números y realice la suma de todos los
                            números pares comprendidos entre ambos números.

                            Inicio:
                                Datos:
                                    Numero1, Numero2, Suma entero
                                Código:
                                    Escribir "Ingrese el primer número:"
                                    Leer Numero1

                                    Escribir "Ingrese el segundo número:"
                                    Leer Numero2

                                    Si Numero1 > Numero2 entonces
                                        Intercambiar Numero1 y Numero2
                                    Fin Si

                                    Suma = 0

                                    Para i desde Numero1 hasta Numero2 hacer
                                        Si i mod 2 = 0 entonces
                                            Suma = Suma + i
                                        Fin Si
                                    Fin Para

                                    Escribir "La suma de los números pares entre ", Numero1, " y ", Numero2, " es ", Suma
                            Fin

                            <!DOCTYPE html>
                            <html lang="es">
                                <head>
                                    <meta charset="UTF-8">
                                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                    <title>Suma de Números Pares</title>
                                </head>
                                <body>
                                    <script>
                                        function intercambiarNumeros(a, b) {
                                            return [b, a];
                                        }
                                        function sumaNumerosPares() {
                                            var numero1 = parseInt(prompt("Ingrese el primer número:"));
                                            var numero2 = parseInt(prompt("Ingrese el segundo número:"));
                                            if (numero1 > numero2) {
                                                [numero1, numero2] = intercambiarNumeros(numero1, numero2);
                                            }
                                            document.write("NUMERO1= "+numero1 + " NUMERO2="+numero2+ "<br>");
                                            var suma = 0;
                                            for (var i = numero1; i <= numero2; i++) {
                                                if (i % 2 === 0) {
                                                    suma += i;
                                                    document.write("I= "+i + " suma="+suma + "<br>");
                                                }
                                            }
                                            alert("La suma de los números pares entre " + numero1 + " y " + numero2 + " es " + suma);
                                        }
                                        sumaNumerosPares();
                                    </script>
                                </body>
                            </html>

                    2- Seguimiento de algoritmos

                        ALGORITMO 1
                            Indica el valor de las variables A y B al finalizar el siguiente
                            algoritmo:

                            Inicio
                                Datos:
                                A, B, C entero
                                Código:
                                A=7
                                B=4
                                C=9 //C=9
                                Mientras (A<>C) hacer //7<>9
                                    Si (C>9) entonces //9 no es mayor que 9
                                        B=B+5  //B=4
                                    Sino
                                        A=A+2 //a=7 c=9 a=7+2=9 A=9
                                    Fin Si
                                Fin Mientras
                            Fin

                            <!DOCTYPE html>
                                <html lang="es">
                                    <head>
                                        <meta charset="UTF-8">
                                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                        <title>algoritomo 1</title>
                                    </head>
                                    <body>
                                        <script>
                                            var A = 7;
                                            var B = 4;
                                            var C = 9;
                                            while (A !== C) {
                                                if (C > 9) {
                                                    B = B + 5;
                                                } else {
                                                    A = A + 2;
                                                }
                                            }
                                            console.log("A: " + A); //9
                                            console.log("B: " + B); //4
                                            console.log("C: " + C); //9
                                        </script>
                                    </body>
                                </html>
                            RESPUESTA
                                A=9
                                B=4
                                C=9

                        ALGORITMO 2 
                            Indica los valores de las variables X, Y y Z al finalizar el siguiente
                            proceso.
                                Respuesta
                                    X=0 Y=21 Z=0

                            Inicio
                            Datos:
                                X entero
                                Y entero
                                Z entero
                            Código:
                                X=0
                                Y=7
                                Z=-4
                                Mientras (X > Z) hacer  //X=0> Z=-4 0>-4    //0>z=-4     //15<15 no cumple   //X=0 >Z=-2  //Z=0 * no cumple sale
                                    Si (Y<15) entonces  //Y=7<15            //11<15                         //y=18
                                        Y=Y+4           //Y=7+4=11          //Y=11+4=15 sale del if         sale del if
                                    Sino                //y=11                        
                                        Si(Z<0) entonces                                //Z=-4<0            //Z=-2<0
                                            Z=Z+2                                       //Z=-4+2=-2         //Z=-2+2=0 
                                        Sino
                                            Z=Z+1                   
                                            X=X-1                   
                                        Fin si
                                        Y=Y+3                                           //y=15+3=18         //y=18+3=21 //*
                                    Fin si
                                Fin mientras
                            Fin 

                            <!DOCTYPE html>
                            <html lang="es">
                                <head>
                                    <meta charset="UTF-8">
                                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                    <title>Algoritmo 2 analisis</title>
                                </head>
                                <body>
                                    <script>
                                        var X = 0;
                                        var Y = 7;
                                        var Z = -4;
                                        while (X > Z) {
                                            console.log("X= "+X+" Z= "+Z)
                                            if (Y < 15) {
                                                Y = Y + 4;
                                                console.log("y= "+Y)
                                            } else {
                                                if (Z < 0) {
                                                    Z = Z + 2;
                                                    console.log("Z= "+Z)
                                                } else {
                                                    Z = Z + 1;
                                                    console.log("Z= "+Z)
                                                    X = X - 1;
                                                    console.log("X= "+X)
                                                }
                                                Y = Y + 3;
                                                console.log("y= "+Y)
                                            }
                                        }
                                        alert("X="+X+" Y="+Y+" Z="+Z)
                                    </script>
                                </body>
                            </html> 

                        ALGORITMO 3
                            Indica el valor que se imprimirá al finalizar el proceso:
                            Respuesta
                                20
                                
                            Inicio
                                Datos:
                                P,X, Contador entero
                                Código:
                                P=4
                                X=0
                                Contador=0
                                Mientras(P<>8) hacer    //4<>8 se cumple
                                    X=X+5               //x=0+5=5 //10 //15 // 20
                                    P=P+1               //p=4+1=5 //6  //7 // 8
                                    Contador=Contador+1 //cont =1 //2
                                Fin Mientras
                                Mostrar “El valor de X es”, X //x=20
                            Fin   
                            <!DOCTYPE html>
                                <html lang="es">
                                    <head>
                                        <meta charset="UTF-8">
                                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                        <title>Ejemplo de código en HTML con JS</title>
                                    </head>
                                    <body>
                                        <script>
                                            var P = 4;
                                            var X = 0;
                                            var Contador = 0;
                                            while (P !== 8) {                       //p=4<>8    //P=5       //P=6,  7
                                                X = X + 5;                          //X=0+5=5   //X=5+1=10  //X=15, 20
                                                P = P + 1;                          //P=4+1=5   //P=5+1=6   //P=7,  8
                                                Contador = Contador + 1;            //C=0+1=1   //C=2       //C=3,  4 
                                            }
                                            console.log("El valor de X es " + X); //x=20
                                        </script>
                                    </body>
                                </html>

                        ALGORITMO 4
                            Indica el valor de la variable X al finalizar el proceso siguiente:
                           RESPUESTA 
                                no termina el proceso del bucle interno
                                el valor de x sera siempre el mismo X=100 
                                hay un bucle infinito y no hay condiciones para salir de ese bucle interno. 
                            Inicio
                                Datos:
                                A, B, X, Y, Z entero
                                Código:
                                A=15
                                B=15
                                X=100
                                Y=100
                                Z=0
                                Mientras(A==B) hacer        //A=B=15        //A=B=18
                                    A=A+3                   //A=15+3=18
                                    Mientras(X==Y) hacer    //X=Y=100      //queda en loop interno infinito     
                                        X=X+Z               //X=100+0=100  //y no logra salir de este bucle 
                                    Fin Mientras
                                    B=B+3                   
                                Fin Mientras                
                            Fin  

                        ALGORITMO 5
                            Indica el valor de la variable Z al finalizar el proceso siguiente:

                            Respuesta.
                                Z: 100
                                La variable Z no se cambia en ningun momento en el codigo

                            Inicio                          
                                Datos:                      
                                A, B, X, Y, Z entero         
                                Código:                     
                                A=60                        
                                B=0                         
                                X=100                       
                                Y=100                       
                                Z=100                       
                                Mientras(A<>B) hacer        //A=60<>B=0                         //A=60<>B=20                        //A=60,B=40     //A=70,B=40
                                    A=A+10                  //A=60+10=70                        //A=60+10=70                        //A=60+10=70    
                                    Mientras(X==Y) hacer    //X=100 == Y=100 //X=200 <> Y=100   //X=200=Y=200   //X=300<> Y=200     //X=300=Y
                                        X=X+Z               //X=100+100=200                     //X=200+100=300                     //X=300+100=400
                                    Fin Mientras                            //sale                              //sale
                                    B=B+20                                  //B=0+20=20                         //B=20+20=40
                                    A=A-10                                  //A=70-10=60                        //A=70-10=60
                                    Y=X                                     //Y=200                             //Y=300=X
                                Fin Mientras                
                            Fin                               

                            DESARROLLO
                                <!DOCTYPE html>
                                <html lang="es">
                                    <head>
                                        <meta charset="UTF-8">
                                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                        <title>Algoritmo 5</title>
                                    </head>
                                    <body>
                                        <script>
                                            var A = 60;
                                            var B = 0;
                                            var X = 100;
                                            var Y = 100;
                                            var Z = 100;
                                            document.write("A: " + A + ", B: " + B + ", X: " + X + ", Y: " + Y + ", Z: " + Z + "<br>");
                                            while (A !== B ) {
                                                document.write("A: " + A + ", B: " + B + ", X: " + X + ", Y: " + Y + ", Z: " + Z + "<br>");
                                                A = A + 10;
                                                document.write("A: " + A + ", B: " + B + ", X: " + X + ", Y: " + Y + ", Z: " + Z + "<br>");
                                                while (X == Y) {
                                                    X = X + Z;
                                                    document.write("A: " + A + ", B: " + B + ", X: " + X + ", Y: " + Y + ", Z: " + Z + "<br>");
                                                }
                                                B = B + 20;
                                                A = A - 10;
                                                Y = X;
                                                document.write("A: " + A + ", B: " + B + ", X: " + X + ", Y: " + Y + ", Z: " + Z + "<br>");
                                            }
                                        </script>
                                    </body>
                                </html>  

                                valores  
                                A: 60, B: 0,  X: 100, Y: 100, Z: 100
                                A: 60, B: 0,  X: 100, Y: 100, Z: 100
                                A: 70, B: 0,  X: 100, Y: 100, Z: 100
                                A: 70, B: 0,  X: 200, Y: 100, Z: 100
                                A: 60, B: 20, X: 200, Y: 200, Z: 100
                                A: 60, B: 20, X: 200, Y: 200, Z: 100
                                A: 70, B: 20, X: 200, Y: 200, Z: 100
                                A: 70, B: 20, X: 300, Y: 200, Z: 100
                                A: 60, B: 40, X: 300, Y: 300, Z: 100
                                A: 60, B: 40, X: 300, Y: 300, Z: 100
                                A: 70, B: 40, X: 300, Y: 300, Z: 100
                                A: 70, B: 40, X: 400, Y: 300, Z: 100
                                A: 60, B: 60, X: 400, Y: 400, Z: 100

                        ALGORITMO 6
                            Indica el valor al que habrá que inicializar P para que al finalizar
                            el proceso el valor que se imprima de X sea 10:

                            Respuesta
                                P=-2
                            
                            Inicio:
                                Datos:
                                X, P entero
                                Código:
                                X=0
                                P=?
                                Mientras(P<=7) hacer
                                    X=X+1
                                    P=P+1
                                Fin Mientras
                                Mostrar “El valor de X es “, X
                            Fin  

                            DESARROLLO
                                <!-- Inicio:
                                    Datos:
                                    X, P entero
                                    Código:
                                    X=0
                                    P=-2
                                    Mientras(P<=7) hacer
                                        X=X+1
                                        P=P+1
                                    Fin Mientras
                                    Mostrar “El valor de X es “, X
                                Fin  -->
                                <!DOCTYPE html>
                                <html lang="es">
                                    <head>
                                        <meta charset="UTF-8">
                                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                        <title>Código en HTML con JS</title>
                                    </head>
                                    <body>
                                        <script>
                                            var X = 0;
                                            var P = -2;
                                            while (P <= 7) {
                                                // Operaciones dentro del bucle
                                                X = X + 1;
                                                P = P + 1;
                                            }
                                            document.write("El valor de X es " + X);
                                        </script>
                                    </body>
                                </html>     

            
        1. Fases en el desarrollo de un programa
            El desarrollo de cualquier programa informático sigue una serie de
            fases que no siempre son llevadas a cabo por la misma persona, pero
            que es necesario que sean realizadas todas y de forma coordinada a
            fin de conseguir un producto de calidad y sin errores.
            El siguiente diagrama nos muestra cuales son estas fases y el orden
            en el que deben ser realizadas:

                        Documentación

                Análisis Diseño Implementación Prueba Mantenimiento 

            1.1 | Fase de análisis
                Su principal objetivo es establecer qué debe hacer el software 
                a desarrollar y no cómo debe hacerlo.
                Suele ser misión del analista funcional.
                    Durante esta fase, el analista recogerá las ideas expuestas por el
                    cliente y deberá transformarlas en especificaciones válidas para
                    el diseñador en lo que se conoce como 
                        el documento de análisis funcional. 
                    Así mismo, dicho documento se deberá validar con el
                    cliente y comprobar que las especificaciones definidas en el mismo,
                    se ajustan a los deseos que cliente le transmitió.

            1.2 | Fase de diseño
                En esta fase, partiendo de la información recogida en el análisis 
                el diseñador establece cómo se llevan a cabo los objetivos presentados 
                en dicho análisis. Suele ser ésta, la misión del analista orgánico.  
                
                Durante esta fase se deberá alcanzar una solución óptima, detallada
                y con la mayor precisión posible para el desarrollo de la aplicación.
                Se trata de diseñar el conjunto de algoritmos de lo que el programa 
                debe hacer y para expresar dichos algoritmos, el analista orgánico
                cuenta con los siguientes elementos:
                    •  Diagramas de flujo. 
                        El diagrama de flujo u ordinograma es una
                        técnica que se basa en expresar de forma gráfica la secuencia
                        lógica y detallada de las operaciones que necesitamos para la
                        realización de un programa. Los ordinogramas se emplearon
                        mucho hasta finales de los 80, y debido a la complejidad de los
                        programas actuales, hoy en día no es la técnica más adecuada
                        para expresar un algoritmo de programación.
                    • Pseudocódigo. 
                        El pseudocódigo consiste en expresar el
                        algoritmo de un programa, de la forma más detallada posible,
                        utilizando frases y palabras del lenguaje común. Las palabras y
                        expresiones que utilizamos en pseudocódigo se asemejan a las
                        que emplean los lenguajes de programación, de ahí que se llame
                        pseudocódigo, pero de una manera más informal. Esto permite
                        que la traducción del algoritmo al código final resulte una tarea
                        relativamente sencilla

            1.3 | Fase de implementación
                Durante esta fase el programador debe convertir el algoritmo
                diseñado en la fase anterior a código escrito en un lenguaje de
                programación de alto nivel. El éxito de esta tarea depende en gran
                medida del detalle y precisión con el que se ha creado el algoritmo, por
                lo que la fase de diseño de un programa resulta de gran importancia
                en el desarrollo de una aplicación.

            1.4 | Fase de documentación
                La fase de documentación no es una fase independiente como el resto de las presentadas,
                sino que se integra con todas las anteriores. Esto significa que se deben documentar todos los
                pasos y acciones realizadas en cada una de las fases del desarrollo. La documentación es algo
                imprescindible para el mantenimiento y mejora del software    

        1. Diseño de algoritmos 
            La fase de diseño de un programa resulta es sin duda alguna una de las más
            importante de todo el proceso de creación de un programa. En ella se diseña el
            algoritmo que describe lo que tiene que hacer el programa. Esta descripción se
            realiza siguiendo la lógica de programación

            Por lógica de programación entendemos la capacidad para expresar
            la secuencia de operaciones o algoritmo que debe seguir un programa
            informático para resolver un problema, utilizando para ello una serie
            de estructuras o expresiones estandarizadas.
            La lógica de programación no es algo con lo que se nazca, sino que
            se adquiere con el tiempo y con la práctica. Por ello, el objetivo de
            este capítulo es presentarte todos los elementos necesarios para
            que, dadas unas especificaciones, seas capaz de expresar de forma
            adecuada la lógica de operaciones que un programa debería seguir
            para conseguir su objetivo

            Según hemos indicado en el capítulo anterior, dos son las técnicas
            que se utilizan para diseñar el algoritmo de un programa:
                • Diagramas de flujo
                • Pseudocódigo

            A continuación analizaremos dichas técnicas con detalle y veremos
            numerosos ejemplos a fin de que adquieras la soltura necesaria para
            diseñar tus propios programas.
            Pero antes de entrar en las técnicas de diseño de algoritmos, vamos
            a analizar uno de los elementos claves de la programación y, por
            tanto, del diseño de algoritmos: los datos.

            1.1 | Datos y variables
                Durante el desarrollo de un programa informático, independientemente del lenguaje de
                programación utilizado, se utilizan datos y variables. 
                Los datos representan la información manejada
                por el programa, y pueden ser 
                    números, 
                    fechas, 
                    textos etc. 
                Todo programa recibe unos datos de entrada que son manipulados por el mismo y,
                 como resultado, generará unos datos de salida.

                Durante la manipulación de los datos por parte del programa,
                estos son almacenados en variables. Una variable es una zona de
                memoria, a la que se le asigna un nombre o identificador, en la que se
                guarda un dato de un determinado tipo. Después, la variable puede
                utilizarse dentro del programa para realizar diferentes operaciones
                con el dato que contine.
                Normalmente, los lenguajes de programación obligan a declarar las
                variables antes de ser utilizadas. Declarar una variable es la manera
                de indicarle al compilador que queremos utilizar una variable,
                a fin de que éste pueda reservar el espacio en memoria para el
                almacenamiento de la misma.
                La manera en la que un lenguaje declara una variable depende
                de la sintaxis del mismo. El siguiente ejemplo corresponde a una
                declaración de una variable de tipo entero en Java:

                    int num; 

                En este caso, se declara una variable de tipo
                entero, es decir, que solo puede almacenar
                datos numéricos de tipo entero, y se le
                asigna el identificador num. Gráficamente, la
                situación en memoria podría representarse
                así:
                    id   valor=dato
                    num  caja

                    La caja sería como la zona de memoria
                asignada a la variable y el nombre que
                aparece a su izquierda sería el identificador
                asignado a la misma.
                Una vez declarada la variable, el programa
                puede hacer uso de ella para asignarle datos
                y después realizar operaciones con los
                mismos. En el ejemplo anterior, la asignación
                de un dato a la variable se realizaría a través
                del signo =, tal y como se muestra en el
                ejemplo:

                    num = 10;

                Como decimos, a partir del momento en que
                la variable ya tiene el dato, pueden realizarse
                operaciones con el mismo, incluido la
                modificación del valor de la propia variable.
                El siguiente ejemplo, sumaría el contenido
                de dos variables y lo depositaría en una de
                ellas: 

                    num1 = 10;
                    num2 = 20;
                    num2 = num2 + num1 //30
            1.2 | Diagramas de flujo
                Conocidos también como ordinogramas, los diagramas de flujo son una técnica que se hizo muy
                popular en los principios de la programación de ordenadores. Aunque actualmente prácticamente no
                se utilice, resulta muy útil para ir adquiriendo esa lógica de programación que nos permita diseñar
                y desarrollar programas, pues el uso de elementos gráficos para representar las estructuras típicas
                utilizadas en programación facilitará la comprensión de los mismos.

                Los ordinogramas se emplean durante
                la fase de diseño de un programa y
                son independientes del lenguaje de
                programación utilizado para implementar el
                mismo.
                Para crear un ordinograma se utilizan una
                serie de símbolos bastante intuitivos y
                fáciles de recordar. La siguiente imagen nos
                muestra los símbolos básicos utilizados en
                la creación de un diagrama de flujo:
                    Principio o fin (de un programa o procedimiento)
                    Proceso
                    Invocación
                    Conexión(en la misma página)
                    Operación E/S
                    Condición
                    Líneas de flujo
                    Conexión (en otra página)
                A la hora de utilizar estos símbolos para crear un ordinograma hay
                que tener en cuenta ciertas normas básicas que debemos cumplir:
                • Todos los símbolos utilizados deben 
                    estar unidos por líneas de flujo solo horizontales y/o verticales.
                • No se pueden cruzar las líneas de flujo. Evitar los cruces.
                • No deben quedar líneas de flujo sin conectar.
                • A un símbolo de proceso pueden llegarle varias líneas de flujo
                    pero solo puede salir una de él.
                • Al símbolo de inicio no puede llegarle ninguna línea de flujo.
                • De un símbolo de fin no puede salir ninguna línea de flujo pero si
                    le pueden llegar varias.
                • Se deben trazar los símbolos de manera que se pueda leer de
                    arriba abajo y de izquierda a derecha.

                El siguiente ordinograma de ejemplo corresponde al algoritmo de un
                programa encargado de leer dos números y mostrar sin son iguales
                o, en caso de ser distintos, cuál de ellos es el mayor.

                1.3 | Símbolo de principio y fin
                    Como su nombre indica, se utilizan para especificar el principio y fin del programa. En su interior se
                    escribe la palabra inicio o fin, según corresponda.
                1.4 | Símbolo de proceso
                    El símbolo de proceso especifica una operación realizada por el programa, como por ejemplo, una
                    operación aritmética con los datos recibidos en la entrada. La operación a realizar se especifica en el
                    interior del rectángulo    

                        s = a + b 

                            En el ejemplo anterior, se realiza la suma de
                            dos datos representados por las variables a
                            y b y el resultado se deposita en una tercera
                            variable llamada “s”. Es decir, la asignación
                            se realiza de derecha a izquierda, que es
                            como se hace en la mayoría de los lenguajes
                            de alto nivel, utilizando el signo “=”.
                            Para expresar las operaciones empleamos
                            símbolos, como el signo + para la suma, el
                            * para la multiplicación, el = para asignar
                            un valor, etc. Estos símbolos son conocidos
                            como operadores. 
                            Cada lenguaje de programación tiene su
                            propio juego de operadores, por lo que a
                            la hora de utilizarlos en el diseño de un
                            ordinograma no hay un convenio claro
                            sobre su utilización; se debe procurar que
                            sean lo más intuitivos posibles. Durante el
                            estudio de la programación estructurada
                            estableceremos un juego de operadores
                            para ser utilizados durante el diseño de
                            pseudocódigo.
                1.5 | Líneas de flujo
                    Las líneas de flujo representan el camino que sigue el algoritmo. 
                    Para representarlas se utilizan flechas, 
                    que parten de una operación y apuntan a la siguiente operación a realizar.

                1.6 | Símbolo de entrada /salida
                    Especifican una operación de entrada o salida, es decir, 
                        de entrada de datos al programa 
                        o de salida de datos desde el programa al exterior. 
                    La operación en concreto se indica en el interior del símbolo,
                    utilizando un verbo como “leer”, “mostrar”, “imprimir”, etc.  

                        Leer a, b 
                        Mostrar “El mayor es”, a  

                    Al indicar la operación de entrada o salida en
                    el diagrama de flujo, nos debemos abstraer
                    del dispositivo en concreto que se utilizará
                    para la operación. Por ejemplo, al indicar
                    Leer a, b, simplemente indicamos que el
                    programa recibe dos datos del exterior, sin
                    especificar el dispositivo concreto utilizado
                    para la lectura de los mismos 
                        (teclado,fichero, Web, etc.).
                    En el caso de las operaciones de entrada,
                    a continuación del nombre de la operación
                    (leer en este caso) se indican las variables
                    donde se guardarán los datos recuperados,
                    separadas por una coma. En el caso de las
                    operaciones de salida, a continuación del
                    nombre de la operación se indicará la lista
                    de variables con los datos a mostrar y si
                    queremos que aparezca también una frase
                    como en nuestro ejemplo, esta frase se
                    escribirá entre comillas.
                1.7 | Símbolo de decisión
                    Mediante este símbolo con forma de rombo expresamos 
                    una operación de comprobación que puede
                    alterar el flujo de ejecución de un programa. 
                    El resultado de la comprobación será de tipo verdadero/
                    falso (SI/NO), 
                    de modo que si es verdadero el programa tomará un camino 
                    y si es falso tomará otro

                    La operación de comprobación se indica
                    entre interrogaciones en el interior del
                    rombo y se utilizan los llamados operadores
                    de tipo condicional, es decir, aquellos
                    símbolos que se utilizan para comprobar la
                    igualdad o desigualdad de datos, si un dato
                    es mayor o menor que otro, etc. El resultado
                    de estas comprobaciones siempre será
                    verdadero o falso.
                    En el ejemplo que hemos presentado, se
                    pregunta si el dato contenido en a es igual
                    al contenido en b, para lo que usamos 
                    el operador doble igual ==, en vez del
                    simple igual =, pues éste se reserva para
                    operaciones de asignación.
                    Una variante de este tipo de operaciones
                    son las decisiones con salida múltiple o
                    alternativas múltiples. En este caso, la
                    operación de comprobación puede dar como
                    resultado distintos valores, no verdadero o
                    falso, por lo que se podrán definir tantas
                    salidas o caminos como posibles resultados
                    queramos controlar.

                    La forma de expresar una operación de 
                    decisión múltiple sería como
                    se indica en el ejemplo 

                        Comprobar x

                        1           5               10
                        Instrucción 1   Instrucción 2     Instrucción 3

                    Como vemos en el ejemplo, dependiendo del valor de un dato
                    llamado “x”, el programa puede tomar diferentes caminos y ejecutar
                    diferentes grupos de instrucciones; si es 1, ejecutará las instrucciones
                    del grupo “instrucción 1”, si es 5 las del grupo “Instrucción 2”, etc. Se
                    puede definir también un camino para el caso de que el resultado de
                    la expresión no coincida con ninguno de los valores definidos.
                    Después de ejecutar cada caso, el programa continuaría por un único
                    camino.
                    El siguiente ordinograma de ejemplo se encarga de leer un número
                    de día y mostrar el día correspondiente, siempre que sea un número
                    entre 1 y 3, sino mostrará que es un día no válido:

                1.8 | Acumuladores y contadores 
                    En la resolución de algoritmos nos vamos a encontrar numerosas
                    situaciones en las que tenemos que realizar la suma o producto
                    de varias cantidades. Estas operaciones no se realizarán en una
                    única fase, sino que requerirán la realización de sumas o productos
                    parciales de forma repetitiva hasta conseguir la cantidad final.
                    Para guardar los resultados de estas operaciones utilizaremos
                    variables de tipo numérico, a las que se conoce en programación
                    con el nombre de acumuladores, puesto que van acumulando los
                    resultados parciales de la operación.
                    En cada suma parcial que se realiza con un acumulador se debe
                    tomar el valor de la variable, sumarle o multiplicarle la cantidad y
                    depositar el resultado de nuevo en la variable. Esto se representa
                    en un ordinograma mediante el símbolo de proceso utilizado una
                    expresión del tipo:

                        variable=variable+cantidad o variable=variable*cantidad

                    En el caso de los acumuladores de suma, la variable se inicializará a
                    0 mientras que para la multiplicación lo hará a 1.
                    En el siguiente ejemplo se muestra el caso de un pequeño programa
                    que realiza la suma de los tres primeros múltiplos de 5 utilizando un
                    acumulador

                    Otro tipo de variables numéricas comúnmente utilizadas en un
                    programa informático son los contadores. Un contador es una
                    variable que se va incrementando en una unidad cada vez que el
                    programa realiza una determinada acción, a fin de ir contando el
                    número de veces que dicha acción es realizada. También puede
                    haber decontadores, es decir, variables que vayan restando uno a su
                    valor repetidas veces.
                    La operación de incremento se representaría en un organigrama
                    mediante el símbolo de proceso en el que se indicará una expresión
                    del tipo variable=variable+1
                    A continuación, te presentamos otro ejemplo de ordinograma que
                    resuelve otro sencillo algoritmo, concretamente, se trataría de
                    un programa que calcula la suma de todos los números naturales
                    comprendidos entre 1 y un número leído. Por ejemplo, si el número
                    leído por el programa es 8, el resultado sería 1+2+3+4+5+6+7+8.
                    Este es su diagrama de flujo:

                    Los contadores y acumuladores siempre se utilizan en el interior de
                    estructuras repetitivas, es decir, aquellas que contienen bloques de
                    instrucciones que se ejecutan repetidamente.

                1.9 | Estructuras repetitivas 
                    En el programa de ejemplo anterior hemos utilizado una estructura clásica en programación, que es
                    la estructura repetitiva. No se trata de una operación en sí, sino de un conjunto de operaciones que
                    se ejecutan mientras que se de una condición   

                    En nuestro caso, se trata de ir acumulando la suma de números
                    naturales en la variable suma hasta alcanzar el número leído.
                    En una estructura repetitiva siempre encontramos una instrucción
                    de tipo condicional, que determina si el grupo de instrucciones
                    tiene que volver o no a ejecutarse. Se puede optar por comprobar
                    la condición y ejecutar las instrucciones si se cumple, o ejecutar
                    primero las instrucciones y comprobar después la condición:

                    En cualquiera de los casos, si la condición se cumple (resultado
                    verdadero), el bloque de instrucciones vuelve a ejecutarse y en el
                    momento en que deje de ejecutarse se continuará por otro camino.
 
            CASOS PRACTICOS 
                1   Realiza un ordinograma para un algoritmo que calcule el total
                    de números naturales que hay que sumar, comenzando por el 1,
                    hasta que la suma alcance el valor 1000.

                        DESARROLLO

                        Inicio                                                      | total = 0                          
                            num = 1    
                            CONDICION                         
                                ?si (total <= 1000)           
                                    total = total + num          
                                    num = num + 1  
                                ?no                 
                                    presentar "El total es: " + total    
                        Fin    

                        <!DOCTYPE html>
                        <html lang="es">
                        <head>
                            <meta charset="UTF-8">
                            <meta name="viewport" content="width=device-width, initial-scale=1.0">
                            <title>Document</title>
                        </head>
                        <body>
                            <script>
                                let total = 0;
                                let num = 1;
                                while (total <= 1000) {
                                    total = total + num;
                                    num = num + 1;
                                }
                                console.log("El total es: " + total);
                            </script>
                        </body>
                        </html>
                2  Análisis de un ordinograma
                    ORDINOGRAMA 1
                        A continuación te vamos a proponer que resuelvas el siguiente
                        ejercicio. Teniendo en cuenta que el operador “%” calcula el resto
                        de la división entre dos números, dado el siguiente diagrama de
                        flujo:
                        Explica el funcionamiento del programa y que es lo que hace.
                        Si se leen los siguientes números: 2, 4, 5, 1, 9, 17, 25, 27, 16, 30 y 11.
                        ¿Cuál sería el valor de la variable total al finalizar el programa? ¿y
                        de la variable cont?

                            DESARROLLO 
                                Cada vez que el usuario ingresa un número, 
                                se verifica si es par, 
                                y si es par se incrementa el total 
                                siempre el contador cont se incrementa en 1. 
                                y Después de las 10 iteraciones, se muestra el total.
                                que es el total de numeros pares ingresados
                                el numero 11 no se logra ingresar pues son solo 10 iteraciones

                            <!DOCTYPE html>
                            <html lang="en">
                            <head>
                                <meta charset="UTF-8">
                                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                <title>Ordinograma1</title>
                            </head>
                            <body>
                                <script>
                                    // Si se leen los siguientes números: 2, 4, 5, 1, 9, 17, 25, 27, 16, 30 y 11.
                                    // ¿Cuál sería el valor de la variable total al finalizar el programa? ¿y
                                    // de la variable cont?
                                    //n es = 2  total acumulando= 1 contador = 1 / n%2= 0  es par
                                    //n es = 4  total acumulando= 2 contador = 2 / n%2= 0  es par
                                    //n es = 5  total acumulando= 2 contador = 3 / n%2= 1  es impar
                                    //n es = 1  total acumulando= 2 contador = 4 / n%2= 1  es impar
                                    //n es = 9  total acumulando= 2 contador = 5 / n%2= 1  es impar
                                    //n es = 17  total acumulando= 2 contador = 6 / n%2= 1  es impar
                                    //n es = 25  total acumulando= 2 contador = 7 / n%2= 1  es impar
                                    //n es = 27  total acumulando= 2 contador = 8 / n%2= 1  es impar
                                    //n es = 16  total acumulando= 3 contador = 9 / n%2= 0  es par
                                    //n es = 30  total acumulando= 4 contador = 10 / n%2= 0  es par
                                    //Total: 4 contador = 10
                                    
                                    let daRespuesta=true
                                    let mensaje=""
                                    let espar=false
                                    let total = 0;
                                    let cont = 0;
                                    // debugger
                                    while (cont < 10) {
                                        let n = prompt("Ingrese un número");
                                        //si cancel el ingreso
                                        if(n===null){
                                            daRespuesta=false
                                            break
                                        }
                                        //si es numero par acumula en el total
                                        if (n % 2 === 0) {
                                            total = total + 1;
                                            espar=true //si es par es true
                                        }    
                                        //siempre se acumula 1
                                        cont = cont + 1;
                                        //si es par guarda el mensaje
                                        if(espar){
                                            mensaje=" es par"
                                            
                                        } else {
                                            mensaje=" es impar"
                                        }
                                        espar=false
                                        alert("n es = " + n +"  total acumulando= " + total + " contador = " +cont+ " / n%2= " +n%2 +" "+mensaje)
                                    }
                                    if(daRespuesta){
                                        alert("Total: " + total+" contador = "+cont);
                                    } else {
                                        alert("se cancelo la operacion")
                                    }
                            </script>

                    ORDINOGRAMA 2
                        A continuación, dado el siguiente ordinograma, te proponemos
                        que respondas a una serie de preguntas:
                        ¿Qué es lo que hace el algoritmo anterior?. ¿Qué se mostraría si la
                        secuencia de números introducidos fuera 2, 5, 9, 3, -1, 4?
            PRUEBA TEORICA
                Test superado
                Has obtenido un 100 en esta tarea

                Tus respuestas
                1. Una variable es:
                    Un tipo de dato utilizado en un programa
                    Un mecanismo para creación de algoritmos
                    Una instrucción de control
                    X Una zona de memoria que almacena un dato
                2. El lenguaje que manipula registros del procesador es:
                    Lenguaje máquina
                    Lenguaje C
                    Cualquier lenguaje de alto nivel
                    Lenguaje ensamblador
                3. Indica cual de las siguientes es una diferencia entre un compilador y un intérprete:
                    Un compilador genera código ejecutable puro, mientras que el intérprete genera código intermedio
                    X Un compilador genera un archivo de código objeto, mientras que el intérprete no genera ningún archivo intermedio
                    Un compilador genera código binario, mientras que el intérprete genera código en ensamblador
                    Un compilador solo es aplicable a lenguajes de alto nivel, mientras que el intérprete se emplea con lenguajes de código intermedio.

                4. En un programa tenemos una variable llamada “intentos” que almacena el número de intentos disponibles que tenemos para poder realizar una determinada tarea. Cada vez que se falla la tarea se deberá quitar un intento, ¿qué instrucción de proceso debemos escribir para ello?:
                    intentos=-1
                    intentos=-intentos
                    intentos-1
                    X intentos=intentos-1
                5. Teniendo en cuenta que el operador “%” calcula el resto de la división entre dos números, dado el siguiente diagrama de flujo:
                    Indica los valores de las variables total y cont al finalizar el programa, suponiendo que los números leídos fueran: 2, 4, 5, 1, 9, 17, 25, 16, 30 y 11:
                        total=0, cont=2
                        X total=4, cont=10
                        total=5,cont=11
                        total=6,cont=0

                        El pseudocódigo consiste en expresar mediante un lenguaje coloquial 
                        las operaciones que describen el algoritmo asociado a un programa informático. 
                        Básicamente, se trata de traducir las operaciones que se describen en un organigrama 
                        a frases del lenguaje común, sin emplear símbolos.
                        El lenguaje utilizado para describir los algoritmos mediante pseudocódigo, 
                        debe ser fácil de interpretar por parte de una persona. 
                        Las palabras y expresiones utilizadas en los mismos deberán indicar de forma 
                        clara y precisa las tareas a realizar.    
                        Y es que, el objetivo del pseudocódigo es intentar describir un
                        algoritmo de la forma más detallada posible y, a su vez, próxima a un
                        lenguaje de programación de alto nivel, de manera que la traducción
                        final al código real durante la fase de implementación sea lo más
                        sencilla posible, de ahí que se le llame pseudocódigo.
                        Seguidamente vamos a ver unos ejemplos que nos van a ir aclarando
                        como plantear un pseudocódigo y las estructuras típicas que se
                        utilizan.  
                            Inicio
                                leer a, b
                                si (a==b) entonces
                                    mostrar “Son iguales”
                                sino
                                    si (a>b) entonces
                                        mostrar “El mayor es”, a
                                    sino
                                        mostrar “El mayor es”, b
                                    fin si
                                fin si
                            Fin  
                        Como vemos, el esquema es similar al que se sigue en los
                        ordinogramas pero sin la utilización de símbolos. En el caso
                        de estructuras complejas, como las instrucciones alternativas,
                        utilizamos palabras especiales como si..entonces..sino..fin si, para
                        definir las operaciones y delimitar su ámbito.
                        Al no seguir un esquema gráfico como el ordinograma, durante la
                        definición de un pseudocódigo 
                            es conveniente indentar (escribir con espacios o tabulaciones a la izquierda) 
                            aquellas instrucciones o bloques de instrucciones que forman parte de otras, 
                            a fin de aclarar la estructura del algoritmo.
                        Aunque hay lenguajes de programación de alto nivel que si lo hacen,
                        nosotros no haremos distinción entre mayúsculas y minúsculas a la
                        hora de escribir un pseudocódigo.
                        En este otro ejemplo tenemos el bloque de pseudocódigo que
                        describe el algoritmo a seguir por un programa encargado de mostrar
                        la suma de todos los números naturales comprendidos entre 1 y un
                        número leído:
                            Inicio
                                suma=0
                                cont=1
                                leer n
                                etiqueta1:
                                suma=suma+cont
                                si(cont<n) entonces
                                    cont=cont+1
                                    ir a etiqueta1
                                sino
                                    mostrar suma
                                fin si	
                            Fin
                        En el pseudocódigo anterior vemos el uso de etiquetas, como la
                        expresión “etiqueta 1:”, que sirven para marcar ciertas partes del
                        programa, de modo que podamos utilizar dichas etiquetas como
                        referencia a la hora pasar el control del programa a ese punto.  
                        Sin la utilización de saltos, que muchas veces dificultan el seguimiento
                        de un algoritmo, el programa anterior podría haberse escrito de esta
                        otra manera utilizando una estructura repetitiva:  

                            Inicio
                            suma=0
                            cont=1
                            leer n
                            mientras (cont<=n)
                                suma=suma+cont
                                cont=cont+1
                            fin mientras
                            mostrar suma
                            Fin
                        Con la estructura repetitiva mientras, lo que queremos expresar es
                        que mientras se cumpla la condición indicada en el paréntesis, el
                        programa tendrá que ejecutar el bloque de sentencias codificadas
                        en su interior (las que aparecen entre mientras y fin mientras).
                        Su funcionamiento es el siguiente: cuando el programa llega a la
                        instrucción mientras, se comprueba la condición y, si esta es cierta,
                        se ejecutará el bloque de sentencias. Después de ejecutar la última
                        sentencia del bloque, el programa vuelve a comprobar la condición
                        del mientras y, si vuelve a cumplirse, de nuevo se ejecuta el conjunto
                        de instrucciones. 
                        Así sucesivamente hasta que la condición sea falsa, en cuyo caso el
                        programa continuará con las instrucciones situadas después de fin
                        mientras.
                        Según indicamos en el apartado anterior, la estructura mientras
                        tendría la siguiente forma representándola con este sistema
                        Como ya hemos visto durante el estudio de los ordinogramas y
                        analizaremos con más detalle durante el estudio de las técnicas de
                        programación estructurada, existen distintas variantes a la hora de
                        implementar una estructura repetitiva, como que la condición sea
                        evaluada después de la ejecución de las instrucciones en vez de
                        antes, o que el bloque de sentencias se ejecute un número definido
                        de veces controlado por un contador.
                        El siguiente pseudocódigo corresponde al ejercicio resuelto
                        presentado en el apartado anterior, consistente en un algoritmo que
                        realiza la lectura y suma de números hasta que el usuario indica que
                        no quiere introducir más números:
                            Inicio
                                suma=0
                                Hacer
                                    leer n
                                    suma=suma+n
                                    mostrar “¿Desea introducir otro número?”
                                    leer op
                                        Mientras (op==”si”)
                                        Mostrar suma
                            Fin
                        En este caso utilizamos la expresión Hacer…Mientras, para ejecutar
                        primero el bloque de sentencias que se deben repetir y preguntas al
                        final por la condición, de modo que si esta condición se cumple, se
                        volverá a ejecutar de nuevo el conjunto de instrucciones indicadas
                        dentro de hacer.
                    1.1 | Normas en la creación de pseudocódigo
                        Aunque cada persona es libre de definir sus propias normas a la hora de 
                        crear pseudocódigo, a fin de conseguir este objetivo,
                        es necesario seguir una serie de reglas básicas y de sentido común, entre
                        las que podríamos destacar:
                            • Disponer de un juego limitado de instrucciones. 
                                Es importante
                                que a la hora de definir un algoritmo mediante pseudocódigo,
                                utilicemos siempre el mismo juego de instrucciones y con ellas
                                resolver cualquier problema de programación.
                            • Utilizar estructuras lógicas de control. 
                                Además de lo que serían
                                las instrucciones de proceso (asignación de datos a una variable,
                                operación aritmética entre variables, etc.), se debe disponer
                                de un juego de instrucciones que expresen las operaciones de
                                control de flujo que se llevan a cabo habitualmente en cualquier
                                programa, como las alternativas simples y múltiples o las de tipo
                                repetitivo.
                            • Separación de datos y código. 
                                Cuando se van a manejar varios
                                datos en un programa, conviene separar la declaración de esos
                                datos a utilizar de lo que serían las instrucciones de manipulación
                                de los mismos.

                                Según la última de las reglas que acabamos de presentar, conviene
                                a la hora de diseñar el pseudocódigo de un algoritmo definir
                                previamente las variables de los datos que se van a manipular y,
                                cuando proceda, inicializar las mismas. Esto permite, antes de
                                empezar con el código, aclarar con qué datos vamos a trabajar.
                                A la hora de declarar las variables, se indicará el nombre de la variable
                                seguido del tipo de dato con el que vamos a trabajar:

                                    Nombre_variable tipo

                                A continuación, mostramos una versión del programa anterior en el
                                que se realiza una separación entre datos y código   
                                    Inicio
                                        suma=0
                                        Hacer
                                        leer n
                                        suma=suma+n
                                        mostrar “¿Desea introducir otro número?”
                                        leer op
                                            Mientras (op==”si”)
                                            Mostrar suma
                                    Fin 
                                Los nombres de los tipos de datos los indicaremos según nuestro
                                criterio, aunque será conveniente estandarizarlos. Más adelante
                                daremos unas indicaciones sobre los tipos de datos habituales que
                                podemos encontrarnos en un programa.

                                Veamos otro algoritmo de ejemplo en pseudocódigo. Corresponde al
                                de un programa encargado de leer un número y mostrar el factorial
                                de dicho número.  

                                El factorial de un número se calcula multiplicando todos los números
                                naturales menores de ese número hasta 1. Por ejemplo, el factorial
                                del 5 se calcularía  

                                    5*4*3*2*1

                                He aquí el algoritmo:

                                    Inicio
                                        Datos:
                                        factorial entero
                                        cont entero
                                        n entero
                                        Código:
                                    factorial=1
                                    Leer n
                                    cont=n
                                        Mientras (cont>=1)
                                            factorial=factorial*cont
                                            cont=cont-1
                                        Fin mientras
                                        mostrar factorial
                                    Fin    

                                    En este ejemplo mostrado se trata de ir multiplicando los números
                                    naturales comprendidos entre 1 y el número leído.
                                    Una vez más, para ir ejecutando repetidas veces una tarea tenemos
                                    que echar mano de la instrucción mientras. 

                                    Para controlar el número de multiplicaciones realizadas, utilizamos
                                    una variable contador que se inicializa al número leído y que con cada
                                    multiplicación se decrementa en una unidad. La variable factorial se
                                    utiliza como acumulador de las multiplicaciones
                    1.2 | Seguimiento de algoritmos
                        El seguimiento de algoritmos es un ejercicio mental que,
                        como su nombre indica, consiste en seguir
                        la lógica de un algoritmo, en nuestro caso escrito mediante pseudocódigo, 
                        tal y como lo haría un ordenador, a fin de determinar el valor final 
                        de ciertas variables.
                        Este ejercicio mental nos va ayudar a comprender el funcionamiento
                        de las estructuras lógicas utilizadas en programación, lo que sin
                        duda va a contribuir enormemente a adaptar nuestra mente a la
                        lógica de programación.  
                    Casos prácticos "Pseudocódigo"
                        A continuación te preesentamos un caso práctico relacionado con  
                        pseudocódigo. Lee atentamente y desarrolla la actividad planteada. 
                        Puedes compartirla en el foro con tus compañeros.      
                        1 - Realización de algoritmos en pseudocódigo
                            ALGORITMO 1
                                Realiza el algoritmo correspondiente a un programa que lea un
                                número y muestre un texto indicando si el número es o no primo


                                Un número primo es un número mayor que 1 
                                que no tiene divisores exactos más allá de 1 y sí mismo. 
                                En otras palabras, un número primo solo es divisible por 1 y por sí mismo. 
                                Aquí hay algunos ejemplos de números primos:

                                2 es el único número primo par.
                                3 es primo, ya que solo es divisible por 1 y 3.
                                5 es primo, ya que solo es divisible por 1 y 5.
                                7 es primo, ya que solo es divisible por 1 y 7.
                                11 es primo, ya que solo es divisible por 1 y 11.
                                Y así sucesivamente.
                                2,3,5,7,11

                                Número primo (Ejemplo: 5):

                                5 es divisible por 1 (5 ÷ 1 = 5).
                                5 es divisible por 5 (5 ÷ 5 = 1).
                                No hay otros números enteros que dividan exactamente a 5.
                                En este caso, los únicos divisores exactos de 5 son 1 y 5.

                                Número no primo (Ejemplo: 6):

                                6 es divisible por 1 (6 ÷ 1 = 6).
                                6 es divisible por 2 (6 ÷ 2 = 3).
                                6 es divisible por 3 (6 ÷ 3 = 2).
                                6 es divisible por 6 (6 ÷ 6 = 1).
                                En este caso, 6 tiene más divisores exactos que 1 y 6. Por lo tanto, no es un número primo.

                                Inicio
                                    Código:
                                    ingrese numero 
                                    valida si el numero es primos
                                    si numero es primo 
                                            presenta texto "El numero es primo"
                                        de lo contrario
                                            presenta texto "El numero no es primo"
                                Fin

                                Inicio:
                                    Datos:
                                        Numero entero
                                    Código:
                                        Escribir "Ingrese un número:"
                                        Leer Numero

                                        Si Numero es menor o igual a 1 entonces
                                            Escribir "El número no es primo, ya que es menor o igual a 1."
                                        Sino si Numero es igual a 2 entonces
                                            Escribir "El número es primo, ya que 2 es el único número primo par."
                                        Sino
                                            Divisor <- 2
                                            Primo <- Verdadero

                                            Mientras Divisor * Divisor <= Numero y Primo es Verdadero hacer
                                                Si Numero es divisible por Divisor entonces
                                                    Primo <- Falso
                                                Fin Si
                                                Divisor <- Divisor + 1
                                            Fin Mientras

                                            Si Primo es Verdadero entonces
                                                Escribir "El número es primo."
                                            Sino
                                                Escribir "El número no es primo."
                                            Fin Si
                                        Fin Si
                                Fin

                                <!DOCTYPE html>
                                <html lang="es">
                                    <head>
                                        <meta charset="UTF-8">
                                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                        <title>Verificar si un número es primo</title>
                                    </head>
                                    <body>
                                        <script>
                                            function esPrimo(numero) {
                                                if (numero <= 1) {
                                                    return false;
                                                }
                                                for (let i = 2; i <= Math.sqrt(numero); i++) {
                                                    if (numero % i === 0) {
                                                        return false;
                                                    }
                                                }
                                                return true;
                                            }
                                            function verificarNumero() {
                                                var inputNumero = document.getElementById('numero');
                                                var numero = parseInt(inputNumero.value);
                                                var mensaje = esPrimo(numero) ? "El número es primo." : "El número no es primo.";
                                                document.getElementById('resultado').innerHTML = mensaje;
                                            }
                                        </script>
                                        <h1>Verificar si un número es primo</h1>
                                        <label for="numero">Ingrese un número:</label>
                                        <input type="number" id="numero">
                                        <button onclick="verificarNumero()">Verificar</button>
                                        <p id="resultado"></p>
                                    </body>
                                </html>


                                
                                if (numero <= 1) {
                                    return false;
                                }
                                verifica si el número es menor o igual a 1. 
                                Si es así, retorna false porque
                                los números menores o iguales a 1 no son primos.

                                for (let i = 2; i <= Math.sqrt(numero); i++) {
                                    if (numero % i === 0) {
                                        return false;
                                    }
                                }
                                Este bucle itera desde 2 hasta la raíz cuadrada del número. 
                                No es necesario verificar divisores más allá de la raíz cuadrada 
                                para determinar si un número es primo. 
                                Si encuentra algún divisor (numero % i === 0), 
                                significa que el número no es primo 
                                y la función devuelve false.

                            ALGORITMO 2
                                Diseñar un algoritmo que lea dos números y realice la suma de todos los
                                números pares comprendidos entre ambos números.

                                Inicio:
                                    Datos:
                                        Numero1, Numero2, Suma entero
                                    Código:
                                        Escribir "Ingrese el primer número:"
                                        Leer Numero1

                                        Escribir "Ingrese el segundo número:"
                                        Leer Numero2

                                        Si Numero1 > Numero2 entonces
                                            Intercambiar Numero1 y Numero2
                                        Fin Si

                                        Suma = 0

                                        Para i desde Numero1 hasta Numero2 hacer
                                            Si i mod 2 = 0 entonces
                                                Suma = Suma + i
                                            Fin Si
                                        Fin Para

                                        Escribir "La suma de los números pares entre ", Numero1, " y ", Numero2, " es ", Suma
                                Fin

                                <!DOCTYPE html>
                                <html lang="es">
                                    <head>
                                        <meta charset="UTF-8">
                                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                        <title>Suma de Números Pares</title>
                                    </head>
                                    <body>
                                        <script>
                                            function intercambiarNumeros(a, b) {
                                                return [b, a];
                                            }
                                            function sumaNumerosPares() {
                                                var numero1 = parseInt(prompt("Ingrese el primer número:"));
                                                var numero2 = parseInt(prompt("Ingrese el segundo número:"));
                                                if (numero1 > numero2) {
                                                    [numero1, numero2] = intercambiarNumeros(numero1, numero2);
                                                }
                                                document.write("NUMERO1= "+numero1 + " NUMERO2="+numero2+ "<br>");
                                                var suma = 0;
                                                for (var i = numero1; i <= numero2; i++) {
                                                    if (i % 2 === 0) {
                                                        suma += i;
                                                        document.write("I= "+i + " suma="+suma + "<br>");
                                                    }
                                                }
                                                alert("La suma de los números pares entre " + numero1 + " y " + numero2 + " es " + suma);
                                            }
                                            sumaNumerosPares();
                                        </script>
                                    </body>
                                </html>

                        2- Seguimiento de algoritmos

                            ALGORITMO 1
                                Indica el valor de las variables A y B al finalizar el siguiente
                                algoritmo:

                                Inicio
                                    Datos:
                                    A, B, C entero
                                    Código:
                                    A=7
                                    B=4
                                    C=9 //C=9
                                    Mientras (A<>C) hacer //7<>9
                                        Si (C>9) entonces //9 no es mayor que 9
                                            B=B+5  //B=4
                                        Sino
                                            A=A+2 //a=7 c=9 a=7+2=9 A=9
                                        Fin Si
                                    Fin Mientras
                                Fin

                                <!DOCTYPE html>
                                    <html lang="es">
                                        <head>
                                            <meta charset="UTF-8">
                                            <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                            <title>algoritomo 1</title>
                                        </head>
                                        <body>
                                            <script>
                                                var A = 7;
                                                var B = 4;
                                                var C = 9;
                                                while (A !== C) {
                                                    if (C > 9) {
                                                        B = B + 5;
                                                    } else {
                                                        A = A + 2;
                                                    }
                                                }
                                                console.log("A: " + A); //9
                                                console.log("B: " + B); //4
                                                console.log("C: " + C); //9
                                            </script>
                                        </body>
                                    </html>
                                RESPUESTA
                                    A=9
                                    B=4
                                    C=9

                            ALGORITMO 2 
                                Indica los valores de las variables X, Y y Z al finalizar el siguiente
                                proceso.
                                    Respuesta
                                        X=0 Y=21 Z=0

                                Inicio
                                Datos:
                                    X entero
                                    Y entero
                                    Z entero
                                Código:
                                    X=0
                                    Y=7
                                    Z=-4
                                    Mientras (X > Z) hacer  //X=0> Z=-4 0>-4    //0>z=-4     //15<15 no cumple   //X=0 >Z=-2  //Z=0 * no cumple sale
                                        Si (Y<15) entonces  //Y=7<15            //11<15                         //y=18
                                            Y=Y+4           //Y=7+4=11          //Y=11+4=15 sale del if         sale del if
                                        Sino                //y=11                        
                                            Si(Z<0) entonces                                //Z=-4<0            //Z=-2<0
                                                Z=Z+2                                       //Z=-4+2=-2         //Z=-2+2=0 
                                            Sino
                                                Z=Z+1                   
                                                X=X-1                   
                                            Fin si
                                            Y=Y+3                                           //y=15+3=18         //y=18+3=21 //*
                                        Fin si
                                    Fin mientras
                                Fin 

                                <!DOCTYPE html>
                                <html lang="es">
                                    <head>
                                        <meta charset="UTF-8">
                                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                        <title>Algoritmo 2 analisis</title>
                                    </head>
                                    <body>
                                        <script>
                                            var X = 0;
                                            var Y = 7;
                                            var Z = -4;
                                            while (X > Z) {
                                                console.log("X= "+X+" Z= "+Z)
                                                if (Y < 15) {
                                                    Y = Y + 4;
                                                    console.log("y= "+Y)
                                                } else {
                                                    if (Z < 0) {
                                                        Z = Z + 2;
                                                        console.log("Z= "+Z)
                                                    } else {
                                                        Z = Z + 1;
                                                        console.log("Z= "+Z)
                                                        X = X - 1;
                                                        console.log("X= "+X)
                                                    }
                                                    Y = Y + 3;
                                                    console.log("y= "+Y)
                                                }
                                            }
                                            alert("X="+X+" Y="+Y+" Z="+Z)
                                        </script>
                                    </body>
                                </html> 

                            ALGORITMO 3
                                Indica el valor que se imprimirá al finalizar el proceso:
                                Respuesta
                                    20
                                    
                                Inicio
                                    Datos:
                                    P,X, Contador entero
                                    Código:
                                    P=4
                                    X=0
                                    Contador=0
                                    Mientras(P<>8) hacer    //4<>8 se cumple
                                        X=X+5               //x=0+5=5 //10 //15 // 20
                                        P=P+1               //p=4+1=5 //6  //7 // 8
                                        Contador=Contador+1 //cont =1 //2
                                    Fin Mientras
                                    Mostrar “El valor de X es”, X //x=20
                                Fin   
                                <!DOCTYPE html>
                                    <html lang="es">
                                        <head>
                                            <meta charset="UTF-8">
                                            <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                            <title>Ejemplo de código en HTML con JS</title>
                                        </head>
                                        <body>
                                            <script>
                                                var P = 4;
                                                var X = 0;
                                                var Contador = 0;
                                                while (P !== 8) {                       //p=4<>8    //P=5       //P=6,  7
                                                    X = X + 5;                          //X=0+5=5   //X=5+1=10  //X=15, 20
                                                    P = P + 1;                          //P=4+1=5   //P=5+1=6   //P=7,  8
                                                    Contador = Contador + 1;            //C=0+1=1   //C=2       //C=3,  4 
                                                }
                                                console.log("El valor de X es " + X); //x=20
                                            </script>
                                        </body>
                                    </html>

                            ALGORITMO 4
                                Indica el valor de la variable X al finalizar el proceso siguiente:
                            RESPUESTA 
                                    no termina el proceso del bucle interno
                                    el valor de x sera siempre el mismo X=100 
                                    hay un bucle infinito y no hay condiciones para salir de ese bucle interno. 
                                Inicio
                                    Datos:
                                    A, B, X, Y, Z entero
                                    Código:
                                    A=15
                                    B=15
                                    X=100
                                    Y=100
                                    Z=0
                                    Mientras(A==B) hacer        //A=B=15        //A=B=18
                                        A=A+3                   //A=15+3=18
                                        Mientras(X==Y) hacer    //X=Y=100      //queda en loop interno infinito     
                                            X=X+Z               //X=100+0=100  //y no logra salir de este bucle 
                                        Fin Mientras
                                        B=B+3                   
                                    Fin Mientras                
                                Fin  

                            ALGORITMO 5
                                Indica el valor de la variable Z al finalizar el proceso siguiente:

                                Respuesta.
                                    Z: 100
                                    La variable Z no se cambia en ningun momento en el codigo

                                Inicio                          
                                    Datos:                      
                                    A, B, X, Y, Z entero         
                                    Código:                     
                                    A=60                        
                                    B=0                         
                                    X=100                       
                                    Y=100                       
                                    Z=100                       
                                    Mientras(A<>B) hacer        //A=60<>B=0                         //A=60<>B=20                        //A=60,B=40     //A=70,B=40
                                        A=A+10                  //A=60+10=70                        //A=60+10=70                        //A=60+10=70    
                                        Mientras(X==Y) hacer    //X=100 == Y=100 //X=200 <> Y=100   //X=200=Y=200   //X=300<> Y=200     //X=300=Y
                                            X=X+Z               //X=100+100=200                     //X=200+100=300                     //X=300+100=400
                                        Fin Mientras                            //sale                              //sale
                                        B=B+20                                  //B=0+20=20                         //B=20+20=40
                                        A=A-10                                  //A=70-10=60                        //A=70-10=60
                                        Y=X                                     //Y=200                             //Y=300=X
                                    Fin Mientras                
                                Fin                               

                                DESARROLLO
                                    <!DOCTYPE html>
                                    <html lang="es">
                                        <head>
                                            <meta charset="UTF-8">
                                            <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                            <title>Algoritmo 5</title>
                                        </head>
                                        <body>
                                            <script>
                                                var A = 60;
                                                var B = 0;
                                                var X = 100;
                                                var Y = 100;
                                                var Z = 100;
                                                document.write("A: " + A + ", B: " + B + ", X: " + X + ", Y: " + Y + ", Z: " + Z + "<br>");
                                                while (A !== B ) {
                                                    document.write("A: " + A + ", B: " + B + ", X: " + X + ", Y: " + Y + ", Z: " + Z + "<br>");
                                                    A = A + 10;
                                                    document.write("A: " + A + ", B: " + B + ", X: " + X + ", Y: " + Y + ", Z: " + Z + "<br>");
                                                    while (X == Y) {
                                                        X = X + Z;
                                                        document.write("A: " + A + ", B: " + B + ", X: " + X + ", Y: " + Y + ", Z: " + Z + "<br>");
                                                    }
                                                    B = B + 20;
                                                    A = A - 10;
                                                    Y = X;
                                                    document.write("A: " + A + ", B: " + B + ", X: " + X + ", Y: " + Y + ", Z: " + Z + "<br>");
                                                }
                                            </script>
                                        </body>
                                    </html>  

                                    valores  
                                    A: 60, B: 0,  X: 100, Y: 100, Z: 100
                                    A: 60, B: 0,  X: 100, Y: 100, Z: 100
                                    A: 70, B: 0,  X: 100, Y: 100, Z: 100
                                    A: 70, B: 0,  X: 200, Y: 100, Z: 100
                                    A: 60, B: 20, X: 200, Y: 200, Z: 100
                                    A: 60, B: 20, X: 200, Y: 200, Z: 100
                                    A: 70, B: 20, X: 200, Y: 200, Z: 100
                                    A: 70, B: 20, X: 300, Y: 200, Z: 100
                                    A: 60, B: 40, X: 300, Y: 300, Z: 100
                                    A: 60, B: 40, X: 300, Y: 300, Z: 100
                                    A: 70, B: 40, X: 300, Y: 300, Z: 100
                                    A: 70, B: 40, X: 400, Y: 300, Z: 100
                                    A: 60, B: 60, X: 400, Y: 400, Z: 100

                            ALGORITMO 6
                                Indica el valor al que habrá que inicializar P para que al finalizar
                                el proceso el valor que se imprima de X sea 10:

                                Respuesta
                                    P=-2
                                
                                Inicio:
                                    Datos:
                                    X, P entero
                                    Código:
                                    X=0
                                    P=?
                                    Mientras(P<=7) hacer
                                        X=X+1
                                        P=P+1
                                    Fin Mientras
                                    Mostrar “El valor de X es “, X
                                Fin  

                                DESARROLLO
                                    <!-- Inicio:
                                        Datos:
                                        X, P entero
                                        Código:
                                        X=0
                                        P=-2
                                        Mientras(P<=7) hacer
                                            X=X+1
                                            P=P+1
                                        Fin Mientras
                                        Mostrar “El valor de X es “, X
                                    Fin  -->
                                    <!DOCTYPE html>
                                    <html lang="es">
                                        <head>
                                            <meta charset="UTF-8">
                                            <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                            <title>Código en HTML con JS</title>
                                        </head>
                                        <body>
                                            <script>
                                                var X = 0;
                                                var P = -2;
                                                while (P <= 7) {
                                                    // Operaciones dentro del bucle
                                                    X = X + 1;
                                                    P = P + 1;
                                                }
                                                document.write("El valor de X es " + X);
                                            </script>
                                        </body>
                                    </html>     
            PRUEBA TEORICA
                Test superado
                Has obtenido un 100 en esta tarea
                    1. Indica cual será el valor de la variable I al finalizar el siguiente bloque de instrucciones:
                            I=1
                            MIENTRAS(I<10) HACER 
                                I=I+2
                                SI(I==7)entonces
                                    I=1
                                FIN SI 
                            FIN MIENTRAS         
                        
                        7
                        10
                        1
                        X Bucle infinito
                    2. Cuál de las siguientes no es una norma a seguir a la hora de realizar pseudocódigos:
                        No utilizar instrucciones repetitivas
                        Separar datos y código
                        Disponer de juego limitado de instrucciones
                        X Se deben evitar saltos    
                    3. Indica el valor que se imprimirá al finalizar el proceso:    
                        INICIO 
                            DATOS 
                            P,X CONTADOR ENTEROS 
                            CODIGO
                            P=4
                            X=0
                            MIENTRAS(P<>8) HACER 
                                X=X+5 
                                P=P+1
                                CONTADOR=CONTADOR+1
                            FIN MIENTRAS 
                            MOSTRAR "EL VALOR DE X ES", X    
                        FIN

                        0
                        1
                        X 20
                        Bucle infinito

                    4. Indica el valor de la variable X al finalizar el proceso siguiente:
                        INICIO
                            DATOS 
                                A,B,X,Y,Z ENTEROS 
                            CODIGO
                                A=15
                                B=15 
                                X=100
                                Y=100
                                Z=0
                                MIENTRAS(A==B) HACER 
                                    A=A+3
                                    MIENTRAS(X==Y)HACER 
                                        X=X+Z
                                    FIN MIENTRAS 
                                    B=B+3 
                                FIN MIENTRAS 
                        FIN

                                        
                        0
                        3
                        9
                        x Bucle infinito
                    5. Indica el valor de la variable Z al finalizar el proceso siguiente:
                        (z nunca se modifica en el codigo)
                        400
                        x 100
                        50
                        600
    MÓDULO 4. PROGRAMACIÓN ESTRUCTURADA.
    Tipos de instrucciones
        A continuación, vamos a conocer los tres tipos de estructuras lógicas que se utilizan 
        en programación estructurada: 
            instrucciones secuenciales, 
            instrucciones alternativas 
            e instrucciones repetitivas.

            Instrucciones secuenciales
                Son aquellas que se ejecutan en secuencia, es decir, 
                una detrás de otra. Realmente, en un programa estructurado 
                todas las sentencias son secuenciales, 
                solo que unas pueden ser simples, como 
                    la inicialización de variables, 
                    operaciones aritméticas entre datos, 
                    lectura de números, 
                y otras pueden ser complejas, 
                    como una instrucción alternativa o repetitiva.

        Centrándonos en las operaciones simples, pueden consistir en la inicialización de alguna variable:
    
    
    

        



CLASES SINCRONICAS VER FORO
    Diplomado: 
    Fundamentos de la Programación 
    y Desarrollo Web Edición 1

    Hola Victor,
    Felicitaciones por el logro, ahora solo 
    queda esperar las masterclass.
    Te comento que se dictarán más adelante 
    cuando se haya concluido el período de incripciones
    y el período para que avancen con el contenido.

    Las clases están programadas para principios de año
    que viene, durante la semana del 15 de enero, 
    pero se avisarán con tiempo por correo y por el foro cuando se haya fijado la fecha exacta.

    Saludos

        

                                         